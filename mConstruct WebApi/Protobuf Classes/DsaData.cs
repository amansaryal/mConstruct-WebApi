// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/DsaData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.services {

  /// <summary>Holder for reflection information generated from protos/DsaData.proto</summary>
  public static partial class DsaDataReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/DsaData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DsaDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90b3MvRHNhRGF0YS5wcm90byKYAgoDRFNBEg8KB2RzYU5hbWUYASAB",
            "KAkSDQoFZHNhSUQYAiABKAkSEQoJdGFza0NvdW50GAMgASgFEhgKEHBlbmRp",
            "bmdUYXNrQ291bnQYBCABKAUSGgoSY29tcGxldGVkVGFza0NvdW50GAUgASgF",
            "EhkKEWFjY2VwdGVkVGFza0NvdW50GAYgASgFEhkKEXJlamVjdGVkVGFza0Nv",
            "dW50GAcgASgFEhcKD3Jldmlld1Rhc2tDb3VudBgIIAEoBRIbChNpblByb2dy",
            "ZXNzVGFza0NvdW50GAkgASgFEg8KB2ZzYU5hbWUYCiABKAkSDQoFZnNhSUQY",
            "CyABKAkSDgoGanBOYW1lGAwgASgJEgwKBGpwSUQYDSABKAlCKQoXY29tLm1D",
            "b25zdHJ1Y3QucHJvdG9idWaqAg1HcnBjLnNlcnZpY2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.DSA), global::Grpc.services.DSA.Parser, new[]{ "DsaName", "DsaID", "TaskCount", "PendingTaskCount", "CompletedTaskCount", "AcceptedTaskCount", "RejectedTaskCount", "ReviewTaskCount", "InProgressTaskCount", "FsaName", "FsaID", "JpName", "JpID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DSA : pb::IMessage<DSA> {
    private static readonly pb::MessageParser<DSA> _parser = new pb::MessageParser<DSA>(() => new DSA());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DSA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.DsaDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSA(DSA other) : this() {
      dsaName_ = other.dsaName_;
      dsaID_ = other.dsaID_;
      taskCount_ = other.taskCount_;
      pendingTaskCount_ = other.pendingTaskCount_;
      completedTaskCount_ = other.completedTaskCount_;
      acceptedTaskCount_ = other.acceptedTaskCount_;
      rejectedTaskCount_ = other.rejectedTaskCount_;
      reviewTaskCount_ = other.reviewTaskCount_;
      inProgressTaskCount_ = other.inProgressTaskCount_;
      fsaName_ = other.fsaName_;
      fsaID_ = other.fsaID_;
      jpName_ = other.jpName_;
      jpID_ = other.jpID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSA Clone() {
      return new DSA(this);
    }

    /// <summary>Field number for the "dsaName" field.</summary>
    public const int DsaNameFieldNumber = 1;
    private string dsaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DsaName {
      get { return dsaName_; }
      set {
        dsaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dsaID" field.</summary>
    public const int DsaIDFieldNumber = 2;
    private string dsaID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DsaID {
      get { return dsaID_; }
      set {
        dsaID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskCount" field.</summary>
    public const int TaskCountFieldNumber = 3;
    private int taskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCount {
      get { return taskCount_; }
      set {
        taskCount_ = value;
      }
    }

    /// <summary>Field number for the "pendingTaskCount" field.</summary>
    public const int PendingTaskCountFieldNumber = 4;
    private int pendingTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PendingTaskCount {
      get { return pendingTaskCount_; }
      set {
        pendingTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "completedTaskCount" field.</summary>
    public const int CompletedTaskCountFieldNumber = 5;
    private int completedTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompletedTaskCount {
      get { return completedTaskCount_; }
      set {
        completedTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "acceptedTaskCount" field.</summary>
    public const int AcceptedTaskCountFieldNumber = 6;
    private int acceptedTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcceptedTaskCount {
      get { return acceptedTaskCount_; }
      set {
        acceptedTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "rejectedTaskCount" field.</summary>
    public const int RejectedTaskCountFieldNumber = 7;
    private int rejectedTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RejectedTaskCount {
      get { return rejectedTaskCount_; }
      set {
        rejectedTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "reviewTaskCount" field.</summary>
    public const int ReviewTaskCountFieldNumber = 8;
    private int reviewTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviewTaskCount {
      get { return reviewTaskCount_; }
      set {
        reviewTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "inProgressTaskCount" field.</summary>
    public const int InProgressTaskCountFieldNumber = 9;
    private int inProgressTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InProgressTaskCount {
      get { return inProgressTaskCount_; }
      set {
        inProgressTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "fsaName" field.</summary>
    public const int FsaNameFieldNumber = 10;
    private string fsaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaName {
      get { return fsaName_; }
      set {
        fsaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fsaID" field.</summary>
    public const int FsaIDFieldNumber = 11;
    private string fsaID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaID {
      get { return fsaID_; }
      set {
        fsaID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpName" field.</summary>
    public const int JpNameFieldNumber = 12;
    private string jpName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpName {
      get { return jpName_; }
      set {
        jpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpID" field.</summary>
    public const int JpIDFieldNumber = 13;
    private string jpID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpID {
      get { return jpID_; }
      set {
        jpID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DSA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DSA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DsaName != other.DsaName) return false;
      if (DsaID != other.DsaID) return false;
      if (TaskCount != other.TaskCount) return false;
      if (PendingTaskCount != other.PendingTaskCount) return false;
      if (CompletedTaskCount != other.CompletedTaskCount) return false;
      if (AcceptedTaskCount != other.AcceptedTaskCount) return false;
      if (RejectedTaskCount != other.RejectedTaskCount) return false;
      if (ReviewTaskCount != other.ReviewTaskCount) return false;
      if (InProgressTaskCount != other.InProgressTaskCount) return false;
      if (FsaName != other.FsaName) return false;
      if (FsaID != other.FsaID) return false;
      if (JpName != other.JpName) return false;
      if (JpID != other.JpID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DsaName.Length != 0) hash ^= DsaName.GetHashCode();
      if (DsaID.Length != 0) hash ^= DsaID.GetHashCode();
      if (TaskCount != 0) hash ^= TaskCount.GetHashCode();
      if (PendingTaskCount != 0) hash ^= PendingTaskCount.GetHashCode();
      if (CompletedTaskCount != 0) hash ^= CompletedTaskCount.GetHashCode();
      if (AcceptedTaskCount != 0) hash ^= AcceptedTaskCount.GetHashCode();
      if (RejectedTaskCount != 0) hash ^= RejectedTaskCount.GetHashCode();
      if (ReviewTaskCount != 0) hash ^= ReviewTaskCount.GetHashCode();
      if (InProgressTaskCount != 0) hash ^= InProgressTaskCount.GetHashCode();
      if (FsaName.Length != 0) hash ^= FsaName.GetHashCode();
      if (FsaID.Length != 0) hash ^= FsaID.GetHashCode();
      if (JpName.Length != 0) hash ^= JpName.GetHashCode();
      if (JpID.Length != 0) hash ^= JpID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DsaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DsaName);
      }
      if (DsaID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DsaID);
      }
      if (TaskCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TaskCount);
      }
      if (PendingTaskCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PendingTaskCount);
      }
      if (CompletedTaskCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CompletedTaskCount);
      }
      if (AcceptedTaskCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AcceptedTaskCount);
      }
      if (RejectedTaskCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RejectedTaskCount);
      }
      if (ReviewTaskCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReviewTaskCount);
      }
      if (InProgressTaskCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InProgressTaskCount);
      }
      if (FsaName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FsaName);
      }
      if (FsaID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FsaID);
      }
      if (JpName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(JpName);
      }
      if (JpID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(JpID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DsaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DsaName);
      }
      if (DsaID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DsaID);
      }
      if (TaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCount);
      }
      if (PendingTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PendingTaskCount);
      }
      if (CompletedTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompletedTaskCount);
      }
      if (AcceptedTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcceptedTaskCount);
      }
      if (RejectedTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RejectedTaskCount);
      }
      if (ReviewTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviewTaskCount);
      }
      if (InProgressTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InProgressTaskCount);
      }
      if (FsaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaName);
      }
      if (FsaID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaID);
      }
      if (JpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpName);
      }
      if (JpID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DSA other) {
      if (other == null) {
        return;
      }
      if (other.DsaName.Length != 0) {
        DsaName = other.DsaName;
      }
      if (other.DsaID.Length != 0) {
        DsaID = other.DsaID;
      }
      if (other.TaskCount != 0) {
        TaskCount = other.TaskCount;
      }
      if (other.PendingTaskCount != 0) {
        PendingTaskCount = other.PendingTaskCount;
      }
      if (other.CompletedTaskCount != 0) {
        CompletedTaskCount = other.CompletedTaskCount;
      }
      if (other.AcceptedTaskCount != 0) {
        AcceptedTaskCount = other.AcceptedTaskCount;
      }
      if (other.RejectedTaskCount != 0) {
        RejectedTaskCount = other.RejectedTaskCount;
      }
      if (other.ReviewTaskCount != 0) {
        ReviewTaskCount = other.ReviewTaskCount;
      }
      if (other.InProgressTaskCount != 0) {
        InProgressTaskCount = other.InProgressTaskCount;
      }
      if (other.FsaName.Length != 0) {
        FsaName = other.FsaName;
      }
      if (other.FsaID.Length != 0) {
        FsaID = other.FsaID;
      }
      if (other.JpName.Length != 0) {
        JpName = other.JpName;
      }
      if (other.JpID.Length != 0) {
        JpID = other.JpID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DsaName = input.ReadString();
            break;
          }
          case 18: {
            DsaID = input.ReadString();
            break;
          }
          case 24: {
            TaskCount = input.ReadInt32();
            break;
          }
          case 32: {
            PendingTaskCount = input.ReadInt32();
            break;
          }
          case 40: {
            CompletedTaskCount = input.ReadInt32();
            break;
          }
          case 48: {
            AcceptedTaskCount = input.ReadInt32();
            break;
          }
          case 56: {
            RejectedTaskCount = input.ReadInt32();
            break;
          }
          case 64: {
            ReviewTaskCount = input.ReadInt32();
            break;
          }
          case 72: {
            InProgressTaskCount = input.ReadInt32();
            break;
          }
          case 82: {
            FsaName = input.ReadString();
            break;
          }
          case 90: {
            FsaID = input.ReadString();
            break;
          }
          case 98: {
            JpName = input.ReadString();
            break;
          }
          case 106: {
            JpID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
