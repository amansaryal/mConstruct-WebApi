// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/PMTestData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.services {

  /// <summary>Holder for reflection information generated from protos/PMTestData.proto</summary>
  public static partial class PMTestDataReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/PMTestData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMTestDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdwcm90b3MvUE1UZXN0RGF0YS5wcm90byLFAgoKUE1UZXN0RGF0YRIQCghv",
            "YmplY3RJRBgBIAEoAxIOCgZ0YXNrSUQYAiABKAkSIgoGc3RhdHVzGAMgASgO",
            "MhIuUE1UZXN0RGF0YS5TdGF0dXMSKAoJZGlyZWN0aW9uGAQgASgOMhUuUE1U",
            "ZXN0RGF0YS5EaXJlY3Rpb24SDQoFcG9ydDEYBSABKAESDQoFcG9ydDIYBiAB",
            "KAESDQoFcG9ydDMYByABKAESDQoFcG9ydDQYCCABKAESDQoFcG9ydDUYCSAB",
            "KAESDQoFcG9ydDYYCiABKAESDQoFcG9ydDcYCyABKAESDQoFcG9ydDgYDCAB",
            "KAEiJAoGU3RhdHVzEgsKB09OX0hPTEQQABINCglDT01QTEVURUQQASIpCglE",
            "aXJlY3Rpb24SCAoETk9ORRAAEggKBEVBU1QQARIICgRXRVNUEAJCKQoXY29t",
            "Lm1Db25zdHJ1Y3QucHJvdG9idWaqAg1HcnBjLnNlcnZpY2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.PMTestData), global::Grpc.services.PMTestData.Parser, new[]{ "ObjectID", "TaskID", "Status", "Direction", "Port1", "Port2", "Port3", "Port4", "Port5", "Port6", "Port7", "Port8" }, null, new[]{ typeof(global::Grpc.services.PMTestData.Types.Status), typeof(global::Grpc.services.PMTestData.Types.Direction) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PMTestData : pb::IMessage<PMTestData> {
    private static readonly pb::MessageParser<PMTestData> _parser = new pb::MessageParser<PMTestData>(() => new PMTestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMTestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.PMTestDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTestData(PMTestData other) : this() {
      objectID_ = other.objectID_;
      taskID_ = other.taskID_;
      status_ = other.status_;
      direction_ = other.direction_;
      port1_ = other.port1_;
      port2_ = other.port2_;
      port3_ = other.port3_;
      port4_ = other.port4_;
      port5_ = other.port5_;
      port6_ = other.port6_;
      port7_ = other.port7_;
      port8_ = other.port8_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTestData Clone() {
      return new PMTestData(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskID" field.</summary>
    public const int TaskIDFieldNumber = 2;
    private string taskID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskID {
      get { return taskID_; }
      set {
        taskID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Grpc.services.PMTestData.Types.Status status_ = global::Grpc.services.PMTestData.Types.Status.OnHold;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.PMTestData.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Grpc.services.PMTestData.Types.Direction direction_ = global::Grpc.services.PMTestData.Types.Direction.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.PMTestData.Types.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "port1" field.</summary>
    public const int Port1FieldNumber = 5;
    private double port1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port1 {
      get { return port1_; }
      set {
        port1_ = value;
      }
    }

    /// <summary>Field number for the "port2" field.</summary>
    public const int Port2FieldNumber = 6;
    private double port2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port2 {
      get { return port2_; }
      set {
        port2_ = value;
      }
    }

    /// <summary>Field number for the "port3" field.</summary>
    public const int Port3FieldNumber = 7;
    private double port3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port3 {
      get { return port3_; }
      set {
        port3_ = value;
      }
    }

    /// <summary>Field number for the "port4" field.</summary>
    public const int Port4FieldNumber = 8;
    private double port4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port4 {
      get { return port4_; }
      set {
        port4_ = value;
      }
    }

    /// <summary>Field number for the "port5" field.</summary>
    public const int Port5FieldNumber = 9;
    private double port5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port5 {
      get { return port5_; }
      set {
        port5_ = value;
      }
    }

    /// <summary>Field number for the "port6" field.</summary>
    public const int Port6FieldNumber = 10;
    private double port6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port6 {
      get { return port6_; }
      set {
        port6_ = value;
      }
    }

    /// <summary>Field number for the "port7" field.</summary>
    public const int Port7FieldNumber = 11;
    private double port7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port7 {
      get { return port7_; }
      set {
        port7_ = value;
      }
    }

    /// <summary>Field number for the "port8" field.</summary>
    public const int Port8FieldNumber = 12;
    private double port8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Port8 {
      get { return port8_; }
      set {
        port8_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMTestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMTestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (TaskID != other.TaskID) return false;
      if (Status != other.Status) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port1, other.Port1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port2, other.Port2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port3, other.Port3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port4, other.Port4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port5, other.Port5)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port6, other.Port6)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port7, other.Port7)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Port8, other.Port8)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (TaskID.Length != 0) hash ^= TaskID.GetHashCode();
      if (Status != global::Grpc.services.PMTestData.Types.Status.OnHold) hash ^= Status.GetHashCode();
      if (Direction != global::Grpc.services.PMTestData.Types.Direction.None) hash ^= Direction.GetHashCode();
      if (Port1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port1);
      if (Port2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port2);
      if (Port3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port3);
      if (Port4 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port4);
      if (Port5 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port5);
      if (Port6 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port6);
      if (Port7 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port7);
      if (Port8 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Port8);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (TaskID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskID);
      }
      if (Status != global::Grpc.services.PMTestData.Types.Status.OnHold) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Direction != global::Grpc.services.PMTestData.Types.Direction.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Direction);
      }
      if (Port1 != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Port1);
      }
      if (Port2 != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Port2);
      }
      if (Port3 != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Port3);
      }
      if (Port4 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Port4);
      }
      if (Port5 != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Port5);
      }
      if (Port6 != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Port6);
      }
      if (Port7 != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Port7);
      }
      if (Port8 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Port8);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (TaskID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskID);
      }
      if (Status != global::Grpc.services.PMTestData.Types.Status.OnHold) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Direction != global::Grpc.services.PMTestData.Types.Direction.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Port1 != 0D) {
        size += 1 + 8;
      }
      if (Port2 != 0D) {
        size += 1 + 8;
      }
      if (Port3 != 0D) {
        size += 1 + 8;
      }
      if (Port4 != 0D) {
        size += 1 + 8;
      }
      if (Port5 != 0D) {
        size += 1 + 8;
      }
      if (Port6 != 0D) {
        size += 1 + 8;
      }
      if (Port7 != 0D) {
        size += 1 + 8;
      }
      if (Port8 != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMTestData other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.TaskID.Length != 0) {
        TaskID = other.TaskID;
      }
      if (other.Status != global::Grpc.services.PMTestData.Types.Status.OnHold) {
        Status = other.Status;
      }
      if (other.Direction != global::Grpc.services.PMTestData.Types.Direction.None) {
        Direction = other.Direction;
      }
      if (other.Port1 != 0D) {
        Port1 = other.Port1;
      }
      if (other.Port2 != 0D) {
        Port2 = other.Port2;
      }
      if (other.Port3 != 0D) {
        Port3 = other.Port3;
      }
      if (other.Port4 != 0D) {
        Port4 = other.Port4;
      }
      if (other.Port5 != 0D) {
        Port5 = other.Port5;
      }
      if (other.Port6 != 0D) {
        Port6 = other.Port6;
      }
      if (other.Port7 != 0D) {
        Port7 = other.Port7;
      }
      if (other.Port8 != 0D) {
        Port8 = other.Port8;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            TaskID = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Grpc.services.PMTestData.Types.Status) input.ReadEnum();
            break;
          }
          case 32: {
            Direction = (global::Grpc.services.PMTestData.Types.Direction) input.ReadEnum();
            break;
          }
          case 41: {
            Port1 = input.ReadDouble();
            break;
          }
          case 49: {
            Port2 = input.ReadDouble();
            break;
          }
          case 57: {
            Port3 = input.ReadDouble();
            break;
          }
          case 65: {
            Port4 = input.ReadDouble();
            break;
          }
          case 73: {
            Port5 = input.ReadDouble();
            break;
          }
          case 81: {
            Port6 = input.ReadDouble();
            break;
          }
          case 89: {
            Port7 = input.ReadDouble();
            break;
          }
          case 97: {
            Port8 = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PMTestData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("ON_HOLD")] OnHold = 0,
        [pbr::OriginalName("COMPLETED")] Completed = 1,
      }

      public enum Direction {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("EAST")] East = 1,
        [pbr::OriginalName("WEST")] West = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
