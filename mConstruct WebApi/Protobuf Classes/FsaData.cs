// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/FsaData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.services {

  /// <summary>Holder for reflection information generated from protos/FsaData.proto</summary>
  public static partial class FsaDataReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/FsaData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FsaDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90b3MvRnNhRGF0YS5wcm90byK1AgoDRlNBEg8KB2ZzYU5hbWUYASAB",
            "KAkSDQoFZnNhSUQYAiABKAkSEAoIZHNhQ291bnQYAyABKAUSGQoRY29tcGxl",
            "dGVkRHNhQ291bnQYBCABKAUSGgoSaW5Qcm9ncmVzc0RzYUNvdW50GAUgASgF",
            "EhcKD3BlbmRpbmdEc2FDb3VudBgGIAEoBRIRCgl0YXNrQ291bnQYByABKAUS",
            "GAoQcGVuZGluZ1Rhc2tDb3VudBgIIAEoBRIZChFhY2NlcHRlZFRhc2tDb3Vu",
            "dBgJIAEoBRIZChFyZWplY3RlZFRhc2tDb3VudBgKIAEoBRIXCg9yZXZpZXdU",
            "YXNrQ291bnQYCyABKAUSEgoKb2ZmZXJDb3VudBgMIAEoBRIOCgZqcE5hbWUY",
            "DSABKAkSDAoEanBJRBgOIAEoCUIpChdjb20ubUNvbnN0cnVjdC5wcm90b2J1",
            "ZqoCDUdycGMuc2VydmljZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.FSA), global::Grpc.services.FSA.Parser, new[]{ "FsaName", "FsaID", "DsaCount", "CompletedDsaCount", "InProgressDsaCount", "PendingDsaCount", "TaskCount", "PendingTaskCount", "AcceptedTaskCount", "RejectedTaskCount", "ReviewTaskCount", "OfferCount", "JpName", "JpID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FSA : pb::IMessage<FSA> {
    private static readonly pb::MessageParser<FSA> _parser = new pb::MessageParser<FSA>(() => new FSA());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FSA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.FsaDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSA(FSA other) : this() {
      fsaName_ = other.fsaName_;
      fsaID_ = other.fsaID_;
      dsaCount_ = other.dsaCount_;
      completedDsaCount_ = other.completedDsaCount_;
      inProgressDsaCount_ = other.inProgressDsaCount_;
      pendingDsaCount_ = other.pendingDsaCount_;
      taskCount_ = other.taskCount_;
      pendingTaskCount_ = other.pendingTaskCount_;
      acceptedTaskCount_ = other.acceptedTaskCount_;
      rejectedTaskCount_ = other.rejectedTaskCount_;
      reviewTaskCount_ = other.reviewTaskCount_;
      offerCount_ = other.offerCount_;
      jpName_ = other.jpName_;
      jpID_ = other.jpID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FSA Clone() {
      return new FSA(this);
    }

    /// <summary>Field number for the "fsaName" field.</summary>
    public const int FsaNameFieldNumber = 1;
    private string fsaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaName {
      get { return fsaName_; }
      set {
        fsaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fsaID" field.</summary>
    public const int FsaIDFieldNumber = 2;
    private string fsaID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaID {
      get { return fsaID_; }
      set {
        fsaID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dsaCount" field.</summary>
    public const int DsaCountFieldNumber = 3;
    private int dsaCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DsaCount {
      get { return dsaCount_; }
      set {
        dsaCount_ = value;
      }
    }

    /// <summary>Field number for the "completedDsaCount" field.</summary>
    public const int CompletedDsaCountFieldNumber = 4;
    private int completedDsaCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompletedDsaCount {
      get { return completedDsaCount_; }
      set {
        completedDsaCount_ = value;
      }
    }

    /// <summary>Field number for the "inProgressDsaCount" field.</summary>
    public const int InProgressDsaCountFieldNumber = 5;
    private int inProgressDsaCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InProgressDsaCount {
      get { return inProgressDsaCount_; }
      set {
        inProgressDsaCount_ = value;
      }
    }

    /// <summary>Field number for the "pendingDsaCount" field.</summary>
    public const int PendingDsaCountFieldNumber = 6;
    private int pendingDsaCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PendingDsaCount {
      get { return pendingDsaCount_; }
      set {
        pendingDsaCount_ = value;
      }
    }

    /// <summary>Field number for the "taskCount" field.</summary>
    public const int TaskCountFieldNumber = 7;
    private int taskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCount {
      get { return taskCount_; }
      set {
        taskCount_ = value;
      }
    }

    /// <summary>Field number for the "pendingTaskCount" field.</summary>
    public const int PendingTaskCountFieldNumber = 8;
    private int pendingTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PendingTaskCount {
      get { return pendingTaskCount_; }
      set {
        pendingTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "acceptedTaskCount" field.</summary>
    public const int AcceptedTaskCountFieldNumber = 9;
    private int acceptedTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcceptedTaskCount {
      get { return acceptedTaskCount_; }
      set {
        acceptedTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "rejectedTaskCount" field.</summary>
    public const int RejectedTaskCountFieldNumber = 10;
    private int rejectedTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RejectedTaskCount {
      get { return rejectedTaskCount_; }
      set {
        rejectedTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "reviewTaskCount" field.</summary>
    public const int ReviewTaskCountFieldNumber = 11;
    private int reviewTaskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviewTaskCount {
      get { return reviewTaskCount_; }
      set {
        reviewTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "offerCount" field.</summary>
    public const int OfferCountFieldNumber = 12;
    private int offerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfferCount {
      get { return offerCount_; }
      set {
        offerCount_ = value;
      }
    }

    /// <summary>Field number for the "jpName" field.</summary>
    public const int JpNameFieldNumber = 13;
    private string jpName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpName {
      get { return jpName_; }
      set {
        jpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpID" field.</summary>
    public const int JpIDFieldNumber = 14;
    private string jpID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpID {
      get { return jpID_; }
      set {
        jpID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FSA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FSA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FsaName != other.FsaName) return false;
      if (FsaID != other.FsaID) return false;
      if (DsaCount != other.DsaCount) return false;
      if (CompletedDsaCount != other.CompletedDsaCount) return false;
      if (InProgressDsaCount != other.InProgressDsaCount) return false;
      if (PendingDsaCount != other.PendingDsaCount) return false;
      if (TaskCount != other.TaskCount) return false;
      if (PendingTaskCount != other.PendingTaskCount) return false;
      if (AcceptedTaskCount != other.AcceptedTaskCount) return false;
      if (RejectedTaskCount != other.RejectedTaskCount) return false;
      if (ReviewTaskCount != other.ReviewTaskCount) return false;
      if (OfferCount != other.OfferCount) return false;
      if (JpName != other.JpName) return false;
      if (JpID != other.JpID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FsaName.Length != 0) hash ^= FsaName.GetHashCode();
      if (FsaID.Length != 0) hash ^= FsaID.GetHashCode();
      if (DsaCount != 0) hash ^= DsaCount.GetHashCode();
      if (CompletedDsaCount != 0) hash ^= CompletedDsaCount.GetHashCode();
      if (InProgressDsaCount != 0) hash ^= InProgressDsaCount.GetHashCode();
      if (PendingDsaCount != 0) hash ^= PendingDsaCount.GetHashCode();
      if (TaskCount != 0) hash ^= TaskCount.GetHashCode();
      if (PendingTaskCount != 0) hash ^= PendingTaskCount.GetHashCode();
      if (AcceptedTaskCount != 0) hash ^= AcceptedTaskCount.GetHashCode();
      if (RejectedTaskCount != 0) hash ^= RejectedTaskCount.GetHashCode();
      if (ReviewTaskCount != 0) hash ^= ReviewTaskCount.GetHashCode();
      if (OfferCount != 0) hash ^= OfferCount.GetHashCode();
      if (JpName.Length != 0) hash ^= JpName.GetHashCode();
      if (JpID.Length != 0) hash ^= JpID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FsaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FsaName);
      }
      if (FsaID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FsaID);
      }
      if (DsaCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DsaCount);
      }
      if (CompletedDsaCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CompletedDsaCount);
      }
      if (InProgressDsaCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InProgressDsaCount);
      }
      if (PendingDsaCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PendingDsaCount);
      }
      if (TaskCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TaskCount);
      }
      if (PendingTaskCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PendingTaskCount);
      }
      if (AcceptedTaskCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AcceptedTaskCount);
      }
      if (RejectedTaskCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RejectedTaskCount);
      }
      if (ReviewTaskCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ReviewTaskCount);
      }
      if (OfferCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OfferCount);
      }
      if (JpName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(JpName);
      }
      if (JpID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(JpID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FsaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaName);
      }
      if (FsaID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaID);
      }
      if (DsaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DsaCount);
      }
      if (CompletedDsaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompletedDsaCount);
      }
      if (InProgressDsaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InProgressDsaCount);
      }
      if (PendingDsaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PendingDsaCount);
      }
      if (TaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCount);
      }
      if (PendingTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PendingTaskCount);
      }
      if (AcceptedTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcceptedTaskCount);
      }
      if (RejectedTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RejectedTaskCount);
      }
      if (ReviewTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviewTaskCount);
      }
      if (OfferCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferCount);
      }
      if (JpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpName);
      }
      if (JpID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FSA other) {
      if (other == null) {
        return;
      }
      if (other.FsaName.Length != 0) {
        FsaName = other.FsaName;
      }
      if (other.FsaID.Length != 0) {
        FsaID = other.FsaID;
      }
      if (other.DsaCount != 0) {
        DsaCount = other.DsaCount;
      }
      if (other.CompletedDsaCount != 0) {
        CompletedDsaCount = other.CompletedDsaCount;
      }
      if (other.InProgressDsaCount != 0) {
        InProgressDsaCount = other.InProgressDsaCount;
      }
      if (other.PendingDsaCount != 0) {
        PendingDsaCount = other.PendingDsaCount;
      }
      if (other.TaskCount != 0) {
        TaskCount = other.TaskCount;
      }
      if (other.PendingTaskCount != 0) {
        PendingTaskCount = other.PendingTaskCount;
      }
      if (other.AcceptedTaskCount != 0) {
        AcceptedTaskCount = other.AcceptedTaskCount;
      }
      if (other.RejectedTaskCount != 0) {
        RejectedTaskCount = other.RejectedTaskCount;
      }
      if (other.ReviewTaskCount != 0) {
        ReviewTaskCount = other.ReviewTaskCount;
      }
      if (other.OfferCount != 0) {
        OfferCount = other.OfferCount;
      }
      if (other.JpName.Length != 0) {
        JpName = other.JpName;
      }
      if (other.JpID.Length != 0) {
        JpID = other.JpID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FsaName = input.ReadString();
            break;
          }
          case 18: {
            FsaID = input.ReadString();
            break;
          }
          case 24: {
            DsaCount = input.ReadInt32();
            break;
          }
          case 32: {
            CompletedDsaCount = input.ReadInt32();
            break;
          }
          case 40: {
            InProgressDsaCount = input.ReadInt32();
            break;
          }
          case 48: {
            PendingDsaCount = input.ReadInt32();
            break;
          }
          case 56: {
            TaskCount = input.ReadInt32();
            break;
          }
          case 64: {
            PendingTaskCount = input.ReadInt32();
            break;
          }
          case 72: {
            AcceptedTaskCount = input.ReadInt32();
            break;
          }
          case 80: {
            RejectedTaskCount = input.ReadInt32();
            break;
          }
          case 88: {
            ReviewTaskCount = input.ReadInt32();
            break;
          }
          case 96: {
            OfferCount = input.ReadInt32();
            break;
          }
          case 106: {
            JpName = input.ReadString();
            break;
          }
          case 114: {
            JpID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
