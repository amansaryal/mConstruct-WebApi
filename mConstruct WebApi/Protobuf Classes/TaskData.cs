// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/mConstruct/data/TaskData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.services {

  /// <summary>Holder for reflection information generated from protos/mConstruct/data/TaskData.proto</summary>
  public static partial class TaskDataReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/mConstruct/data/TaskData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVwcm90b3MvbUNvbnN0cnVjdC9kYXRhL1Rhc2tEYXRhLnByb3RvGhNwcm90",
            "b3MvQ29tbW9uLnByb3RvGiNwcm90b3MvbUNvbnN0cnVjdC9kYXRhL0syRGF0",
            "YS5wcm90byKSAwoMVGFza1NuYXBzaG90Eg4KBnRhc2tJZBgBIAEoCRIQCgh0",
            "YXNrTkVJRBgCIAEoCRIXCgZzdGF0dXMYAyABKA4yBy5TdGF0dXMSFAoMY29u",
            "dHJhY3RvcklEGAQgASgJEhYKDmNvbnRyYWN0b3JOYW1lGAUgASgJEg8KB3Jl",
            "bWFya3MYBiABKAkSHAoLcGVuZGluZ1dpdGgYByABKA4yBy5LMlJvbGUSFwoG",
            "azJSb2xlGAggASgOMgcuSzJSb2xlEhMKC3Jvd1JlcXVpcmVkGAkgASgIEg8K",
            "B2RzYU5hbWUYCiABKAkSDQoFZHNhSUQYCyABKAkSDwoHZnNhTmFtZRgMIAEo",
            "CRINCgVmc2FJRBgNIAEoCRIOCgZqcE5hbWUYDiABKAkSDAoEanBJRBgPIAEo",
            "CRIVCgVsYXllchgQIAEoDjIGLkxheWVyEhsKCHRhc2tUeXBlGBEgASgOMgku",
            "VGFza1R5cGUSFAoMYXNzaWduZWREYXRlGBIgASgJEhQKDG1vZGlmaWVkRGF0",
            "ZRgTIAEoCSJECghPRE5UYXNrcxIbCgh0YXNrVHlwZRgBIAEoDjIJLlRhc2tU",
            "eXBlEhsKBHRhc2sYAiADKAsyDS5UYXNrU25hcHNob3QiSAoMQ2l2aWxVR1Rh",
            "c2tzEhsKCHRhc2tUeXBlGAEgASgOMgkuVGFza1R5cGUSGwoEdGFzaxgCIAMo",
            "CzINLlRhc2tTbmFwc2hvdCJLCg9DaXZpbE5vblVHVGFza3MSGwoIdGFza1R5",
            "cGUYASABKA4yCS5UYXNrVHlwZRIbCgR0YXNrGAIgAygLMg0uVGFza1NuYXBz",
            "aG90IkQKCE1EVVRhc2tzEhsKCHRhc2tUeXBlGAEgASgOMgkuVGFza1R5cGUS",
            "GwoEdGFzaxgCIAMoCzINLlRhc2tTbmFwc2hvdCItCg5FcXVpcG1lbnRUYXNr",
            "cxIbCghvZG5UYXNrcxgBIAEoCzIJLk9ETlRhc2tzIlsKCVNwYW5UYXNrcxIj",
            "CgxjaXZpbFVHVGFza3MYASABKAsyDS5DaXZpbFVHVGFza3MSKQoPY2l2aWxO",
            "b25VR1Rhc2tzGAIgASgLMhAuQ2l2aWxOb25VR1Rhc2tzImAKDlN0cnVjdHVy",
            "ZVRhc2tzEiMKDGNpdmlsVUdUYXNrcxgBIAEoCzINLkNpdmlsVUdUYXNrcxIp",
            "Cg9jaXZpbE5vblVHVGFza3MYAiABKAsyEC5DaXZpbE5vblVHVGFza3MiLgoP",
            "VHJhbnNtZWRpYVRhc2tzEhsKCG9kblRhc2tzGAEgASgLMgkuT0ROVGFza3Mi",
            "MQoSVHJhbnNtZWRpYU1EVVRhc2tzEhsKCG1kdVRhc2tzGAEgASgLMgkuTURV",
            "VGFza3Mi4QUKE0VxdWlwbWVudERhdGFGaWVsZHMSEAoIb2JqZWN0SUQYASAB",
            "KAMSIwoMdGFza1NuYXBzaG90GAIgASgLMg0uVGFza1NuYXBzaG90EhQKDGZl",
            "ZWRlck51bWJlchgDIAEoCRIYChBlcXVpcG1lbnRSZWZOYW1lGAQgASgJEh4K",
            "FmRlc2lnbkVxdWlwbWVudFJlZk5hbWUYBSABKAkSGQoRcGFyZW50U3RydWN0",
            "dXJlSUQYBiABKAkSHwoXZGVzaWduUGFyZW50U3RydWN0dXJlSUQYByABKAkS",
            "MwoKb3RkclN0YXR1cxgIIAEoDjIfLkVxdWlwbWVudERhdGFGaWVsZHMuT1RE",
            "UlN0YXR1cxIXCg9vcHRpY2FsTG9zc0Vhc3QYCSABKAESFwoPb3B0aWNhbExv",
            "c3NXZXN0GAogASgBEh0KFWRlc2lnbk9wdGljYWxMb3NzRWFzdBgLIAEoARId",
            "ChVkZXNpZ25PcHRpY2FsTG9zc1dlc3QYDCABKAESHAoUdGVzdGluZ0VxdWlw",
            "bWVudE5hbWUYDSABKAkSHQoVZXF1aXBtZW50U2VyaWFsTnVtYmVyGA4gASgJ",
            "EhQKDGxvY2F0aW9uTmFtZRgPIAEoCRIXCg9jYWxpYnJhdGlvbkRhdGUYECAB",
            "KAkSIwoMaW5zdGFsbGF0aW9uGBEgASgOMg0uSW5zdGFsbGF0aW9uEg0KBWZs",
            "b29yGBIgASgJEgwKBHdpbmcYEyABKAkSEwoLZGVzaWduRmxvb3IYFCABKAkS",
            "EgoKZGVzaWduV2luZxgVIAEoCRITCgtzcGxpY2VDb3VudBgWIAEoBRIZChFk",
            "ZXNpZ25TcGxpY2VDb3VudBgXIAEoBRINCgVsYWJlbBgYIAEoCSJMCgpPVERS",
            "U3RhdHVzEgwKCE5PVF9ET05FEAASDQoJRUFTVF9ET05FEAESDQoJV0VTVF9E",
            "T05FEAISEgoORUFTVF9XRVNUX0RPTkUQAyKrAgoOU3BhbkRhdGFGaWVsZHMS",
            "EAoIb2JqZWN0SUQYASABKAMSIwoMdGFza1NuYXBzaG90GAIgASgLMg0uVGFz",
            "a1NuYXBzaG90Eg4KBmxlbmd0aBgDIAEoARIaChJjb25zdHJ1Y3Rpb25NZXRo",
            "b2QYBCABKAkSEgoKZHVjdENvbmZpZxgFIAEoCRIOCgZzdHJhdGEYBiABKAkS",
            "CwoDZmltGAcgASgIEg0KBWRlcHRoGAggASgBEhMKC3Jvd1JlcXVpcmVkGAkg",
            "ASgIEg8KB3Jvd1R5cGUYCiABKAkSFAoMZGVzaWduTGVuZ3RoGAsgASgBEiAK",
            "GGRlc2lnbkNvbnN0cnVjdGlvbk1ldGhvZBgMIAEoCRIYChBkZXNpZ25EdWN0",
            "Q29uZmlnGA0gASgJIv8BChNTdHJ1Y3R1cmVEYXRhRmllbGRzEhAKCG9iamVj",
            "dElEGAEgASgDEiMKDHRhc2tTbmFwc2hvdBgCIAEoCzINLlRhc2tTbmFwc2hv",
            "dBIYChBzdHJ1Y3R1cmVSZWZOYW1lGAMgASgJEhUKDXN0cnVjdHVyZVR5cGUY",
            "BCABKAkSFwoPcHJvZHVjdFNlcmlhbE5vGAUgASgJEhgKEGxvY2F0aW9uTGFu",
            "ZG1hcmsYBiABKAkSEAoIbWhIaFNpemUYByABKAkSHgoWZGVzaWduU3RydWN0",
            "dXJlUmVmTmFtZRgIIAEoCRIbChNkZXNpZ25TdHJ1Y3R1cmVUeXBlGAkgASgJ",
            "IqgCChRUcmFuc21lZGlhRGF0YUZpZWxkcxIQCghvYmplY3RJRBgBIAEoAxIj",
            "Cgx0YXNrU25hcHNob3QYAiABKAsyDS5UYXNrU25hcHNob3QSDgoGbGVuZ3Ro",
            "GAMgASgBEhYKDnRyYW5zbWVkaWFUeXBlGAQgASgJEhoKEnRyYW5zbWVkaWFD",
            "YXRlZ29yeRgFIAEoCRINCgVsYWJlbBgGIAEoCRIYChBvdGRyUmVhZGluZ1N0",
            "YXJ0GAcgASgBEhYKDm90ZHJSZWFkaW5nRW5kGAggASgBEhQKDGRlc2lnbkxl",
            "bmd0aBgJIAEoARIcChRkZXNpZ25UcmFuc21lZGlhVHlwZRgKIAEoCRIgChhk",
            "ZXNpZ25UcmFuc21lZGlhQ2F0ZWdvcnkYCyABKAkiUAoXVHJhbnNtZWRpYU1E",
            "VURhdGFGaWVsZHMSEAoIb2JqZWN0SUQYASABKAMSIwoMdGFza1NuYXBzaG90",
            "GAIgASgLMg0uVGFza1NuYXBzaG90IsMCCghUYXNrRGF0YRIaChJlc3JpR2Vv",
            "bWV0cnlTdHJpbmcYASABKAkSMwoTZXF1aXBtZW50QXR0cmlidXRlcxgCIAEo",
            "CzIULkVxdWlwbWVudERhdGFGaWVsZHNIABIpCg5zcGFuQXR0cmlidXRlcxgD",
            "IAEoCzIPLlNwYW5EYXRhRmllbGRzSAASMwoTc3RydWN0dXJlQXR0cmlidXRl",
            "cxgEIAEoCzIULlN0cnVjdHVyZURhdGFGaWVsZHNIABI1ChR0cmFuc21lZGlh",
            "QXR0cmlidXRlcxgFIAEoCzIVLlRyYW5zbWVkaWFEYXRhRmllbGRzSAASOwoX",
            "dHJhbnNtZWRpYU1EVUF0dHJpYnV0ZXMYBiABKAsyGC5UcmFuc21lZGlhTURV",
            "RGF0YUZpZWxkc0gAQhIKEERhdGFGaWVsZHNPYmplY3QihwEKDkhpc3RvcnlT",
            "bmlwcGV0EhcKBnN0YXR1cxgBIAEoDjIHLlN0YXR1cxISCgp1cGRhdGVEYXRl",
            "GAIgASgJEhYKDnVwZGF0ZWRCeV9Vc2VyGAMgASgJEh8KDnVwZGF0ZWRCeV9S",
            "b2xlGAQgASgOMgcuSzJSb2xlEg8KB3JlbWFya3MYBSABKAkiRgoLVGFza0hp",
            "c3RvcnkSDgoGdGFza0lEGAEgASgJEicKDmhpc3RvcnlTbmlwcGV0GAIgASgL",
            "Mg8uSGlzdG9yeVNuaXBwZXQqSQoIVGFza1R5cGUSCwoHTk9fVFlQRRAAEgwK",
            "CENJVklMX1VHEAESEAoMQ0lWSUxfTk9OX1VHEAISBwoDT0ROEAMSBwoDTURV",
            "EAQqUAoGU3RhdHVzEgwKCEFTU0lHTkVEEAASDwoLSU5fUFJPR1JFU1MQARIN",
            "CglDT01QTEVURUQQAhIMCghSRUpFQ1RFRBADEgoKBlJFV09SSxAEKicKDElu",
            "c3RhbGxhdGlvbhILCgdPVVRET09SEAASCgoGSU5ET09SEAFCKQoXY29tLm1D",
            "b25zdHJ1Y3QucHJvdG9idWaqAg1HcnBjLnNlcnZpY2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Grpc.common.CommonReflection.Descriptor, global::Grpc.services.K2DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grpc.services.TaskType), typeof(global::Grpc.services.Status), typeof(global::Grpc.services.Installation), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TaskSnapshot), global::Grpc.services.TaskSnapshot.Parser, new[]{ "TaskId", "TaskNEID", "Status", "ContractorID", "ContractorName", "Remarks", "PendingWith", "K2Role", "RowRequired", "DsaName", "DsaID", "FsaName", "FsaID", "JpName", "JpID", "Layer", "TaskType", "AssignedDate", "ModifiedDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.ODNTasks), global::Grpc.services.ODNTasks.Parser, new[]{ "TaskType", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.CivilUGTasks), global::Grpc.services.CivilUGTasks.Parser, new[]{ "TaskType", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.CivilNonUGTasks), global::Grpc.services.CivilNonUGTasks.Parser, new[]{ "TaskType", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.MDUTasks), global::Grpc.services.MDUTasks.Parser, new[]{ "TaskType", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.EquipmentTasks), global::Grpc.services.EquipmentTasks.Parser, new[]{ "OdnTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.SpanTasks), global::Grpc.services.SpanTasks.Parser, new[]{ "CivilUGTasks", "CivilNonUGTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.StructureTasks), global::Grpc.services.StructureTasks.Parser, new[]{ "CivilUGTasks", "CivilNonUGTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TransmediaTasks), global::Grpc.services.TransmediaTasks.Parser, new[]{ "OdnTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TransmediaMDUTasks), global::Grpc.services.TransmediaMDUTasks.Parser, new[]{ "MduTasks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.EquipmentDataFields), global::Grpc.services.EquipmentDataFields.Parser, new[]{ "ObjectID", "TaskSnapshot", "FeederNumber", "EquipmentRefName", "DesignEquipmentRefName", "ParentStructureID", "DesignParentStructureID", "OtdrStatus", "OpticalLossEast", "OpticalLossWest", "DesignOpticalLossEast", "DesignOpticalLossWest", "TestingEquipmentName", "EquipmentSerialNumber", "LocationName", "CalibrationDate", "Installation", "Floor", "Wing", "DesignFloor", "DesignWing", "SpliceCount", "DesignSpliceCount", "Label" }, null, new[]{ typeof(global::Grpc.services.EquipmentDataFields.Types.OTDRStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.SpanDataFields), global::Grpc.services.SpanDataFields.Parser, new[]{ "ObjectID", "TaskSnapshot", "Length", "ConstructionMethod", "DuctConfig", "Strata", "Fim", "Depth", "RowRequired", "RowType", "DesignLength", "DesignConstructionMethod", "DesignDuctConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.StructureDataFields), global::Grpc.services.StructureDataFields.Parser, new[]{ "ObjectID", "TaskSnapshot", "StructureRefName", "StructureType", "ProductSerialNo", "LocationLandmark", "MhHhSize", "DesignStructureRefName", "DesignStructureType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TransmediaDataFields), global::Grpc.services.TransmediaDataFields.Parser, new[]{ "ObjectID", "TaskSnapshot", "Length", "TransmediaType", "TransmediaCategory", "Label", "OtdrReadingStart", "OtdrReadingEnd", "DesignLength", "DesignTransmediaType", "DesignTransmediaCategory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TransmediaMDUDataFields), global::Grpc.services.TransmediaMDUDataFields.Parser, new[]{ "ObjectID", "TaskSnapshot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TaskData), global::Grpc.services.TaskData.Parser, new[]{ "EsriGeometryString", "EquipmentAttributes", "SpanAttributes", "StructureAttributes", "TransmediaAttributes", "TransmediaMDUAttributes" }, new[]{ "DataFieldsObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.HistorySnippet), global::Grpc.services.HistorySnippet.Parser, new[]{ "Status", "UpdateDate", "UpdatedByUser", "UpdatedByRole", "Remarks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.services.TaskHistory), global::Grpc.services.TaskHistory.Parser, new[]{ "TaskID", "HistorySnippet" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TaskType {
    [pbr::OriginalName("NO_TYPE")] NoType = 0,
    [pbr::OriginalName("CIVIL_UG")] CivilUg = 1,
    [pbr::OriginalName("CIVIL_NON_UG")] CivilNonUg = 2,
    [pbr::OriginalName("ODN")] Odn = 3,
    [pbr::OriginalName("MDU")] Mdu = 4,
  }

  public enum Status {
    [pbr::OriginalName("ASSIGNED")] Assigned = 0,
    [pbr::OriginalName("IN_PROGRESS")] InProgress = 1,
    [pbr::OriginalName("COMPLETED")] Completed = 2,
    [pbr::OriginalName("REJECTED")] Rejected = 3,
    [pbr::OriginalName("REWORK")] Rework = 4,
  }

  public enum Installation {
    [pbr::OriginalName("OUTDOOR")] Outdoor = 0,
    [pbr::OriginalName("INDOOR")] Indoor = 1,
  }

  #endregion

  #region Messages
  public sealed partial class TaskSnapshot : pb::IMessage<TaskSnapshot> {
    private static readonly pb::MessageParser<TaskSnapshot> _parser = new pb::MessageParser<TaskSnapshot>(() => new TaskSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSnapshot(TaskSnapshot other) : this() {
      taskId_ = other.taskId_;
      taskNEID_ = other.taskNEID_;
      status_ = other.status_;
      contractorID_ = other.contractorID_;
      contractorName_ = other.contractorName_;
      remarks_ = other.remarks_;
      pendingWith_ = other.pendingWith_;
      k2Role_ = other.k2Role_;
      rowRequired_ = other.rowRequired_;
      dsaName_ = other.dsaName_;
      dsaID_ = other.dsaID_;
      fsaName_ = other.fsaName_;
      fsaID_ = other.fsaID_;
      jpName_ = other.jpName_;
      jpID_ = other.jpID_;
      layer_ = other.layer_;
      taskType_ = other.taskType_;
      assignedDate_ = other.assignedDate_;
      modifiedDate_ = other.modifiedDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSnapshot Clone() {
      return new TaskSnapshot(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskNEID" field.</summary>
    public const int TaskNEIDFieldNumber = 2;
    private string taskNEID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskNEID {
      get { return taskNEID_; }
      set {
        taskNEID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Grpc.services.Status status_ = global::Grpc.services.Status.Assigned;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "contractorID" field.</summary>
    public const int ContractorIDFieldNumber = 4;
    private string contractorID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractorID {
      get { return contractorID_; }
      set {
        contractorID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contractorName" field.</summary>
    public const int ContractorNameFieldNumber = 5;
    private string contractorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractorName {
      get { return contractorName_; }
      set {
        contractorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 6;
    private string remarks_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pendingWith" field.</summary>
    public const int PendingWithFieldNumber = 7;
    private global::Grpc.services.K2Role pendingWith_ = global::Grpc.services.K2Role.K2NoRole;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.K2Role PendingWith {
      get { return pendingWith_; }
      set {
        pendingWith_ = value;
      }
    }

    /// <summary>Field number for the "k2Role" field.</summary>
    public const int K2RoleFieldNumber = 8;
    private global::Grpc.services.K2Role k2Role_ = global::Grpc.services.K2Role.K2NoRole;
    /// <summary>
    ///??
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.K2Role K2Role {
      get { return k2Role_; }
      set {
        k2Role_ = value;
      }
    }

    /// <summary>Field number for the "rowRequired" field.</summary>
    public const int RowRequiredFieldNumber = 9;
    private bool rowRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RowRequired {
      get { return rowRequired_; }
      set {
        rowRequired_ = value;
      }
    }

    /// <summary>Field number for the "dsaName" field.</summary>
    public const int DsaNameFieldNumber = 10;
    private string dsaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DsaName {
      get { return dsaName_; }
      set {
        dsaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dsaID" field.</summary>
    public const int DsaIDFieldNumber = 11;
    private string dsaID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DsaID {
      get { return dsaID_; }
      set {
        dsaID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fsaName" field.</summary>
    public const int FsaNameFieldNumber = 12;
    private string fsaName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaName {
      get { return fsaName_; }
      set {
        fsaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fsaID" field.</summary>
    public const int FsaIDFieldNumber = 13;
    private string fsaID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsaID {
      get { return fsaID_; }
      set {
        fsaID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpName" field.</summary>
    public const int JpNameFieldNumber = 14;
    private string jpName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpName {
      get { return jpName_; }
      set {
        jpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpID" field.</summary>
    public const int JpIDFieldNumber = 15;
    private string jpID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JpID {
      get { return jpID_; }
      set {
        jpID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 16;
    private global::Grpc.common.Layer layer_ = global::Grpc.common.Layer.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.common.Layer Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 17;
    private global::Grpc.services.TaskType taskType_ = global::Grpc.services.TaskType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "assignedDate" field.</summary>
    public const int AssignedDateFieldNumber = 18;
    private string assignedDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssignedDate {
      get { return assignedDate_; }
      set {
        assignedDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modifiedDate" field.</summary>
    public const int ModifiedDateFieldNumber = 19;
    private string modifiedDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifiedDate {
      get { return modifiedDate_; }
      set {
        modifiedDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (TaskNEID != other.TaskNEID) return false;
      if (Status != other.Status) return false;
      if (ContractorID != other.ContractorID) return false;
      if (ContractorName != other.ContractorName) return false;
      if (Remarks != other.Remarks) return false;
      if (PendingWith != other.PendingWith) return false;
      if (K2Role != other.K2Role) return false;
      if (RowRequired != other.RowRequired) return false;
      if (DsaName != other.DsaName) return false;
      if (DsaID != other.DsaID) return false;
      if (FsaName != other.FsaName) return false;
      if (FsaID != other.FsaID) return false;
      if (JpName != other.JpName) return false;
      if (JpID != other.JpID) return false;
      if (Layer != other.Layer) return false;
      if (TaskType != other.TaskType) return false;
      if (AssignedDate != other.AssignedDate) return false;
      if (ModifiedDate != other.ModifiedDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (TaskNEID.Length != 0) hash ^= TaskNEID.GetHashCode();
      if (Status != global::Grpc.services.Status.Assigned) hash ^= Status.GetHashCode();
      if (ContractorID.Length != 0) hash ^= ContractorID.GetHashCode();
      if (ContractorName.Length != 0) hash ^= ContractorName.GetHashCode();
      if (Remarks.Length != 0) hash ^= Remarks.GetHashCode();
      if (PendingWith != global::Grpc.services.K2Role.K2NoRole) hash ^= PendingWith.GetHashCode();
      if (K2Role != global::Grpc.services.K2Role.K2NoRole) hash ^= K2Role.GetHashCode();
      if (RowRequired != false) hash ^= RowRequired.GetHashCode();
      if (DsaName.Length != 0) hash ^= DsaName.GetHashCode();
      if (DsaID.Length != 0) hash ^= DsaID.GetHashCode();
      if (FsaName.Length != 0) hash ^= FsaName.GetHashCode();
      if (FsaID.Length != 0) hash ^= FsaID.GetHashCode();
      if (JpName.Length != 0) hash ^= JpName.GetHashCode();
      if (JpID.Length != 0) hash ^= JpID.GetHashCode();
      if (Layer != global::Grpc.common.Layer.None) hash ^= Layer.GetHashCode();
      if (TaskType != global::Grpc.services.TaskType.NoType) hash ^= TaskType.GetHashCode();
      if (AssignedDate.Length != 0) hash ^= AssignedDate.GetHashCode();
      if (ModifiedDate.Length != 0) hash ^= ModifiedDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (TaskNEID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskNEID);
      }
      if (Status != global::Grpc.services.Status.Assigned) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (ContractorID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContractorID);
      }
      if (ContractorName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ContractorName);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remarks);
      }
      if (PendingWith != global::Grpc.services.K2Role.K2NoRole) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PendingWith);
      }
      if (K2Role != global::Grpc.services.K2Role.K2NoRole) {
        output.WriteRawTag(64);
        output.WriteEnum((int) K2Role);
      }
      if (RowRequired != false) {
        output.WriteRawTag(72);
        output.WriteBool(RowRequired);
      }
      if (DsaName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DsaName);
      }
      if (DsaID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DsaID);
      }
      if (FsaName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FsaName);
      }
      if (FsaID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FsaID);
      }
      if (JpName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(JpName);
      }
      if (JpID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(JpID);
      }
      if (Layer != global::Grpc.common.Layer.None) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Layer);
      }
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) TaskType);
      }
      if (AssignedDate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssignedDate);
      }
      if (ModifiedDate.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ModifiedDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (TaskNEID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskNEID);
      }
      if (Status != global::Grpc.services.Status.Assigned) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ContractorID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractorID);
      }
      if (ContractorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractorName);
      }
      if (Remarks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks);
      }
      if (PendingWith != global::Grpc.services.K2Role.K2NoRole) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PendingWith);
      }
      if (K2Role != global::Grpc.services.K2Role.K2NoRole) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) K2Role);
      }
      if (RowRequired != false) {
        size += 1 + 1;
      }
      if (DsaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DsaName);
      }
      if (DsaID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DsaID);
      }
      if (FsaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaName);
      }
      if (FsaID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsaID);
      }
      if (JpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpName);
      }
      if (JpID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JpID);
      }
      if (Layer != global::Grpc.common.Layer.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Layer);
      }
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      if (AssignedDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssignedDate);
      }
      if (ModifiedDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModifiedDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskNEID.Length != 0) {
        TaskNEID = other.TaskNEID;
      }
      if (other.Status != global::Grpc.services.Status.Assigned) {
        Status = other.Status;
      }
      if (other.ContractorID.Length != 0) {
        ContractorID = other.ContractorID;
      }
      if (other.ContractorName.Length != 0) {
        ContractorName = other.ContractorName;
      }
      if (other.Remarks.Length != 0) {
        Remarks = other.Remarks;
      }
      if (other.PendingWith != global::Grpc.services.K2Role.K2NoRole) {
        PendingWith = other.PendingWith;
      }
      if (other.K2Role != global::Grpc.services.K2Role.K2NoRole) {
        K2Role = other.K2Role;
      }
      if (other.RowRequired != false) {
        RowRequired = other.RowRequired;
      }
      if (other.DsaName.Length != 0) {
        DsaName = other.DsaName;
      }
      if (other.DsaID.Length != 0) {
        DsaID = other.DsaID;
      }
      if (other.FsaName.Length != 0) {
        FsaName = other.FsaName;
      }
      if (other.FsaID.Length != 0) {
        FsaID = other.FsaID;
      }
      if (other.JpName.Length != 0) {
        JpName = other.JpName;
      }
      if (other.JpID.Length != 0) {
        JpID = other.JpID;
      }
      if (other.Layer != global::Grpc.common.Layer.None) {
        Layer = other.Layer;
      }
      if (other.TaskType != global::Grpc.services.TaskType.NoType) {
        TaskType = other.TaskType;
      }
      if (other.AssignedDate.Length != 0) {
        AssignedDate = other.AssignedDate;
      }
      if (other.ModifiedDate.Length != 0) {
        ModifiedDate = other.ModifiedDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            TaskNEID = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Grpc.services.Status) input.ReadEnum();
            break;
          }
          case 34: {
            ContractorID = input.ReadString();
            break;
          }
          case 42: {
            ContractorName = input.ReadString();
            break;
          }
          case 50: {
            Remarks = input.ReadString();
            break;
          }
          case 56: {
            PendingWith = (global::Grpc.services.K2Role) input.ReadEnum();
            break;
          }
          case 64: {
            K2Role = (global::Grpc.services.K2Role) input.ReadEnum();
            break;
          }
          case 72: {
            RowRequired = input.ReadBool();
            break;
          }
          case 82: {
            DsaName = input.ReadString();
            break;
          }
          case 90: {
            DsaID = input.ReadString();
            break;
          }
          case 98: {
            FsaName = input.ReadString();
            break;
          }
          case 106: {
            FsaID = input.ReadString();
            break;
          }
          case 114: {
            JpName = input.ReadString();
            break;
          }
          case 122: {
            JpID = input.ReadString();
            break;
          }
          case 128: {
            Layer = (global::Grpc.common.Layer) input.ReadEnum();
            break;
          }
          case 136: {
            TaskType = (global::Grpc.services.TaskType) input.ReadEnum();
            break;
          }
          case 146: {
            AssignedDate = input.ReadString();
            break;
          }
          case 154: {
            ModifiedDate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ODNTasks : pb::IMessage<ODNTasks> {
    private static readonly pb::MessageParser<ODNTasks> _parser = new pb::MessageParser<ODNTasks>(() => new ODNTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ODNTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ODNTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ODNTasks(ODNTasks other) : this() {
      taskType_ = other.taskType_;
      task_ = other.task_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ODNTasks Clone() {
      return new ODNTasks(this);
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private global::Grpc.services.TaskType taskType_ = global::Grpc.services.TaskType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpc.services.TaskSnapshot> _repeated_task_codec
        = pb::FieldCodec.ForMessage(18, global::Grpc.services.TaskSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Grpc.services.TaskSnapshot> task_ = new pbc::RepeatedField<global::Grpc.services.TaskSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.services.TaskSnapshot> Task {
      get { return task_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ODNTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ODNTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if(!task_.Equals(other.task_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != global::Grpc.services.TaskType.NoType) hash ^= TaskType.GetHashCode();
      hash ^= task_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TaskType);
      }
      task_.WriteTo(output, _repeated_task_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      size += task_.CalculateSize(_repeated_task_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ODNTasks other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != global::Grpc.services.TaskType.NoType) {
        TaskType = other.TaskType;
      }
      task_.Add(other.task_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskType = (global::Grpc.services.TaskType) input.ReadEnum();
            break;
          }
          case 18: {
            task_.AddEntriesFrom(input, _repeated_task_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CivilUGTasks : pb::IMessage<CivilUGTasks> {
    private static readonly pb::MessageParser<CivilUGTasks> _parser = new pb::MessageParser<CivilUGTasks>(() => new CivilUGTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CivilUGTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilUGTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilUGTasks(CivilUGTasks other) : this() {
      taskType_ = other.taskType_;
      task_ = other.task_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilUGTasks Clone() {
      return new CivilUGTasks(this);
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private global::Grpc.services.TaskType taskType_ = global::Grpc.services.TaskType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpc.services.TaskSnapshot> _repeated_task_codec
        = pb::FieldCodec.ForMessage(18, global::Grpc.services.TaskSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Grpc.services.TaskSnapshot> task_ = new pbc::RepeatedField<global::Grpc.services.TaskSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.services.TaskSnapshot> Task {
      get { return task_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CivilUGTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CivilUGTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if(!task_.Equals(other.task_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != global::Grpc.services.TaskType.NoType) hash ^= TaskType.GetHashCode();
      hash ^= task_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TaskType);
      }
      task_.WriteTo(output, _repeated_task_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      size += task_.CalculateSize(_repeated_task_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CivilUGTasks other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != global::Grpc.services.TaskType.NoType) {
        TaskType = other.TaskType;
      }
      task_.Add(other.task_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskType = (global::Grpc.services.TaskType) input.ReadEnum();
            break;
          }
          case 18: {
            task_.AddEntriesFrom(input, _repeated_task_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CivilNonUGTasks : pb::IMessage<CivilNonUGTasks> {
    private static readonly pb::MessageParser<CivilNonUGTasks> _parser = new pb::MessageParser<CivilNonUGTasks>(() => new CivilNonUGTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CivilNonUGTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilNonUGTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilNonUGTasks(CivilNonUGTasks other) : this() {
      taskType_ = other.taskType_;
      task_ = other.task_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CivilNonUGTasks Clone() {
      return new CivilNonUGTasks(this);
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private global::Grpc.services.TaskType taskType_ = global::Grpc.services.TaskType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpc.services.TaskSnapshot> _repeated_task_codec
        = pb::FieldCodec.ForMessage(18, global::Grpc.services.TaskSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Grpc.services.TaskSnapshot> task_ = new pbc::RepeatedField<global::Grpc.services.TaskSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.services.TaskSnapshot> Task {
      get { return task_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CivilNonUGTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CivilNonUGTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if(!task_.Equals(other.task_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != global::Grpc.services.TaskType.NoType) hash ^= TaskType.GetHashCode();
      hash ^= task_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TaskType);
      }
      task_.WriteTo(output, _repeated_task_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      size += task_.CalculateSize(_repeated_task_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CivilNonUGTasks other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != global::Grpc.services.TaskType.NoType) {
        TaskType = other.TaskType;
      }
      task_.Add(other.task_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskType = (global::Grpc.services.TaskType) input.ReadEnum();
            break;
          }
          case 18: {
            task_.AddEntriesFrom(input, _repeated_task_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MDUTasks : pb::IMessage<MDUTasks> {
    private static readonly pb::MessageParser<MDUTasks> _parser = new pb::MessageParser<MDUTasks>(() => new MDUTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDUTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDUTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDUTasks(MDUTasks other) : this() {
      taskType_ = other.taskType_;
      task_ = other.task_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDUTasks Clone() {
      return new MDUTasks(this);
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private global::Grpc.services.TaskType taskType_ = global::Grpc.services.TaskType.NoType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpc.services.TaskSnapshot> _repeated_task_codec
        = pb::FieldCodec.ForMessage(18, global::Grpc.services.TaskSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Grpc.services.TaskSnapshot> task_ = new pbc::RepeatedField<global::Grpc.services.TaskSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.services.TaskSnapshot> Task {
      get { return task_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDUTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDUTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if(!task_.Equals(other.task_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != global::Grpc.services.TaskType.NoType) hash ^= TaskType.GetHashCode();
      hash ^= task_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TaskType);
      }
      task_.WriteTo(output, _repeated_task_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != global::Grpc.services.TaskType.NoType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      size += task_.CalculateSize(_repeated_task_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDUTasks other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != global::Grpc.services.TaskType.NoType) {
        TaskType = other.TaskType;
      }
      task_.Add(other.task_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskType = (global::Grpc.services.TaskType) input.ReadEnum();
            break;
          }
          case 18: {
            task_.AddEntriesFrom(input, _repeated_task_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentTasks : pb::IMessage<EquipmentTasks> {
    private static readonly pb::MessageParser<EquipmentTasks> _parser = new pb::MessageParser<EquipmentTasks>(() => new EquipmentTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentTasks(EquipmentTasks other) : this() {
      odnTasks_ = other.odnTasks_ != null ? other.odnTasks_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentTasks Clone() {
      return new EquipmentTasks(this);
    }

    /// <summary>Field number for the "odnTasks" field.</summary>
    public const int OdnTasksFieldNumber = 1;
    private global::Grpc.services.ODNTasks odnTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.ODNTasks OdnTasks {
      get { return odnTasks_; }
      set {
        odnTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OdnTasks, other.OdnTasks)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (odnTasks_ != null) hash ^= OdnTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (odnTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OdnTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (odnTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OdnTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentTasks other) {
      if (other == null) {
        return;
      }
      if (other.odnTasks_ != null) {
        if (odnTasks_ == null) {
          OdnTasks = new global::Grpc.services.ODNTasks();
        }
        OdnTasks.MergeFrom(other.OdnTasks);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (odnTasks_ == null) {
              OdnTasks = new global::Grpc.services.ODNTasks();
            }
            input.ReadMessage(OdnTasks);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpanTasks : pb::IMessage<SpanTasks> {
    private static readonly pb::MessageParser<SpanTasks> _parser = new pb::MessageParser<SpanTasks>(() => new SpanTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanTasks(SpanTasks other) : this() {
      civilUGTasks_ = other.civilUGTasks_ != null ? other.civilUGTasks_.Clone() : null;
      civilNonUGTasks_ = other.civilNonUGTasks_ != null ? other.civilNonUGTasks_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanTasks Clone() {
      return new SpanTasks(this);
    }

    /// <summary>Field number for the "civilUGTasks" field.</summary>
    public const int CivilUGTasksFieldNumber = 1;
    private global::Grpc.services.CivilUGTasks civilUGTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.CivilUGTasks CivilUGTasks {
      get { return civilUGTasks_; }
      set {
        civilUGTasks_ = value;
      }
    }

    /// <summary>Field number for the "civilNonUGTasks" field.</summary>
    public const int CivilNonUGTasksFieldNumber = 2;
    private global::Grpc.services.CivilNonUGTasks civilNonUGTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.CivilNonUGTasks CivilNonUGTasks {
      get { return civilNonUGTasks_; }
      set {
        civilNonUGTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CivilUGTasks, other.CivilUGTasks)) return false;
      if (!object.Equals(CivilNonUGTasks, other.CivilNonUGTasks)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (civilUGTasks_ != null) hash ^= CivilUGTasks.GetHashCode();
      if (civilNonUGTasks_ != null) hash ^= CivilNonUGTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (civilUGTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CivilUGTasks);
      }
      if (civilNonUGTasks_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CivilNonUGTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (civilUGTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CivilUGTasks);
      }
      if (civilNonUGTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CivilNonUGTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanTasks other) {
      if (other == null) {
        return;
      }
      if (other.civilUGTasks_ != null) {
        if (civilUGTasks_ == null) {
          CivilUGTasks = new global::Grpc.services.CivilUGTasks();
        }
        CivilUGTasks.MergeFrom(other.CivilUGTasks);
      }
      if (other.civilNonUGTasks_ != null) {
        if (civilNonUGTasks_ == null) {
          CivilNonUGTasks = new global::Grpc.services.CivilNonUGTasks();
        }
        CivilNonUGTasks.MergeFrom(other.CivilNonUGTasks);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (civilUGTasks_ == null) {
              CivilUGTasks = new global::Grpc.services.CivilUGTasks();
            }
            input.ReadMessage(CivilUGTasks);
            break;
          }
          case 18: {
            if (civilNonUGTasks_ == null) {
              CivilNonUGTasks = new global::Grpc.services.CivilNonUGTasks();
            }
            input.ReadMessage(CivilNonUGTasks);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StructureTasks : pb::IMessage<StructureTasks> {
    private static readonly pb::MessageParser<StructureTasks> _parser = new pb::MessageParser<StructureTasks>(() => new StructureTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StructureTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureTasks(StructureTasks other) : this() {
      civilUGTasks_ = other.civilUGTasks_ != null ? other.civilUGTasks_.Clone() : null;
      civilNonUGTasks_ = other.civilNonUGTasks_ != null ? other.civilNonUGTasks_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureTasks Clone() {
      return new StructureTasks(this);
    }

    /// <summary>Field number for the "civilUGTasks" field.</summary>
    public const int CivilUGTasksFieldNumber = 1;
    private global::Grpc.services.CivilUGTasks civilUGTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.CivilUGTasks CivilUGTasks {
      get { return civilUGTasks_; }
      set {
        civilUGTasks_ = value;
      }
    }

    /// <summary>Field number for the "civilNonUGTasks" field.</summary>
    public const int CivilNonUGTasksFieldNumber = 2;
    private global::Grpc.services.CivilNonUGTasks civilNonUGTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.CivilNonUGTasks CivilNonUGTasks {
      get { return civilNonUGTasks_; }
      set {
        civilNonUGTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StructureTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StructureTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CivilUGTasks, other.CivilUGTasks)) return false;
      if (!object.Equals(CivilNonUGTasks, other.CivilNonUGTasks)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (civilUGTasks_ != null) hash ^= CivilUGTasks.GetHashCode();
      if (civilNonUGTasks_ != null) hash ^= CivilNonUGTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (civilUGTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CivilUGTasks);
      }
      if (civilNonUGTasks_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CivilNonUGTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (civilUGTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CivilUGTasks);
      }
      if (civilNonUGTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CivilNonUGTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StructureTasks other) {
      if (other == null) {
        return;
      }
      if (other.civilUGTasks_ != null) {
        if (civilUGTasks_ == null) {
          CivilUGTasks = new global::Grpc.services.CivilUGTasks();
        }
        CivilUGTasks.MergeFrom(other.CivilUGTasks);
      }
      if (other.civilNonUGTasks_ != null) {
        if (civilNonUGTasks_ == null) {
          CivilNonUGTasks = new global::Grpc.services.CivilNonUGTasks();
        }
        CivilNonUGTasks.MergeFrom(other.CivilNonUGTasks);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (civilUGTasks_ == null) {
              CivilUGTasks = new global::Grpc.services.CivilUGTasks();
            }
            input.ReadMessage(CivilUGTasks);
            break;
          }
          case 18: {
            if (civilNonUGTasks_ == null) {
              CivilNonUGTasks = new global::Grpc.services.CivilNonUGTasks();
            }
            input.ReadMessage(CivilNonUGTasks);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransmediaTasks : pb::IMessage<TransmediaTasks> {
    private static readonly pb::MessageParser<TransmediaTasks> _parser = new pb::MessageParser<TransmediaTasks>(() => new TransmediaTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmediaTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaTasks(TransmediaTasks other) : this() {
      odnTasks_ = other.odnTasks_ != null ? other.odnTasks_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaTasks Clone() {
      return new TransmediaTasks(this);
    }

    /// <summary>Field number for the "odnTasks" field.</summary>
    public const int OdnTasksFieldNumber = 1;
    private global::Grpc.services.ODNTasks odnTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.ODNTasks OdnTasks {
      get { return odnTasks_; }
      set {
        odnTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmediaTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmediaTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OdnTasks, other.OdnTasks)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (odnTasks_ != null) hash ^= OdnTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (odnTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OdnTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (odnTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OdnTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmediaTasks other) {
      if (other == null) {
        return;
      }
      if (other.odnTasks_ != null) {
        if (odnTasks_ == null) {
          OdnTasks = new global::Grpc.services.ODNTasks();
        }
        OdnTasks.MergeFrom(other.OdnTasks);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (odnTasks_ == null) {
              OdnTasks = new global::Grpc.services.ODNTasks();
            }
            input.ReadMessage(OdnTasks);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransmediaMDUTasks : pb::IMessage<TransmediaMDUTasks> {
    private static readonly pb::MessageParser<TransmediaMDUTasks> _parser = new pb::MessageParser<TransmediaMDUTasks>(() => new TransmediaMDUTasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmediaMDUTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUTasks(TransmediaMDUTasks other) : this() {
      mduTasks_ = other.mduTasks_ != null ? other.mduTasks_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUTasks Clone() {
      return new TransmediaMDUTasks(this);
    }

    /// <summary>Field number for the "mduTasks" field.</summary>
    public const int MduTasksFieldNumber = 1;
    private global::Grpc.services.MDUTasks mduTasks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.MDUTasks MduTasks {
      get { return mduTasks_; }
      set {
        mduTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmediaMDUTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmediaMDUTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MduTasks, other.MduTasks)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mduTasks_ != null) hash ^= MduTasks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mduTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MduTasks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mduTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MduTasks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmediaMDUTasks other) {
      if (other == null) {
        return;
      }
      if (other.mduTasks_ != null) {
        if (mduTasks_ == null) {
          MduTasks = new global::Grpc.services.MDUTasks();
        }
        MduTasks.MergeFrom(other.MduTasks);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mduTasks_ == null) {
              MduTasks = new global::Grpc.services.MDUTasks();
            }
            input.ReadMessage(MduTasks);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipmentDataFields : pb::IMessage<EquipmentDataFields> {
    private static readonly pb::MessageParser<EquipmentDataFields> _parser = new pb::MessageParser<EquipmentDataFields>(() => new EquipmentDataFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentDataFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentDataFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentDataFields(EquipmentDataFields other) : this() {
      objectID_ = other.objectID_;
      taskSnapshot_ = other.taskSnapshot_ != null ? other.taskSnapshot_.Clone() : null;
      feederNumber_ = other.feederNumber_;
      equipmentRefName_ = other.equipmentRefName_;
      designEquipmentRefName_ = other.designEquipmentRefName_;
      parentStructureID_ = other.parentStructureID_;
      designParentStructureID_ = other.designParentStructureID_;
      otdrStatus_ = other.otdrStatus_;
      opticalLossEast_ = other.opticalLossEast_;
      opticalLossWest_ = other.opticalLossWest_;
      designOpticalLossEast_ = other.designOpticalLossEast_;
      designOpticalLossWest_ = other.designOpticalLossWest_;
      testingEquipmentName_ = other.testingEquipmentName_;
      equipmentSerialNumber_ = other.equipmentSerialNumber_;
      locationName_ = other.locationName_;
      calibrationDate_ = other.calibrationDate_;
      installation_ = other.installation_;
      floor_ = other.floor_;
      wing_ = other.wing_;
      designFloor_ = other.designFloor_;
      designWing_ = other.designWing_;
      spliceCount_ = other.spliceCount_;
      designSpliceCount_ = other.designSpliceCount_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipmentDataFields Clone() {
      return new EquipmentDataFields(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskSnapshot" field.</summary>
    public const int TaskSnapshotFieldNumber = 2;
    private global::Grpc.services.TaskSnapshot taskSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskSnapshot TaskSnapshot {
      get { return taskSnapshot_; }
      set {
        taskSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "feederNumber" field.</summary>
    public const int FeederNumberFieldNumber = 3;
    private string feederNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeederNumber {
      get { return feederNumber_; }
      set {
        feederNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipmentRefName" field.</summary>
    public const int EquipmentRefNameFieldNumber = 4;
    private string equipmentRefName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipmentRefName {
      get { return equipmentRefName_; }
      set {
        equipmentRefName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designEquipmentRefName" field.</summary>
    public const int DesignEquipmentRefNameFieldNumber = 5;
    private string designEquipmentRefName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignEquipmentRefName {
      get { return designEquipmentRefName_; }
      set {
        designEquipmentRefName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentStructureID" field.</summary>
    public const int ParentStructureIDFieldNumber = 6;
    private string parentStructureID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentStructureID {
      get { return parentStructureID_; }
      set {
        parentStructureID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designParentStructureID" field.</summary>
    public const int DesignParentStructureIDFieldNumber = 7;
    private string designParentStructureID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignParentStructureID {
      get { return designParentStructureID_; }
      set {
        designParentStructureID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otdrStatus" field.</summary>
    public const int OtdrStatusFieldNumber = 8;
    private global::Grpc.services.EquipmentDataFields.Types.OTDRStatus otdrStatus_ = global::Grpc.services.EquipmentDataFields.Types.OTDRStatus.NotDone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.EquipmentDataFields.Types.OTDRStatus OtdrStatus {
      get { return otdrStatus_; }
      set {
        otdrStatus_ = value;
      }
    }

    /// <summary>Field number for the "opticalLossEast" field.</summary>
    public const int OpticalLossEastFieldNumber = 9;
    private double opticalLossEast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpticalLossEast {
      get { return opticalLossEast_; }
      set {
        opticalLossEast_ = value;
      }
    }

    /// <summary>Field number for the "opticalLossWest" field.</summary>
    public const int OpticalLossWestFieldNumber = 10;
    private double opticalLossWest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpticalLossWest {
      get { return opticalLossWest_; }
      set {
        opticalLossWest_ = value;
      }
    }

    /// <summary>Field number for the "designOpticalLossEast" field.</summary>
    public const int DesignOpticalLossEastFieldNumber = 11;
    private double designOpticalLossEast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DesignOpticalLossEast {
      get { return designOpticalLossEast_; }
      set {
        designOpticalLossEast_ = value;
      }
    }

    /// <summary>Field number for the "designOpticalLossWest" field.</summary>
    public const int DesignOpticalLossWestFieldNumber = 12;
    private double designOpticalLossWest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DesignOpticalLossWest {
      get { return designOpticalLossWest_; }
      set {
        designOpticalLossWest_ = value;
      }
    }

    /// <summary>Field number for the "testingEquipmentName" field.</summary>
    public const int TestingEquipmentNameFieldNumber = 13;
    private string testingEquipmentName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestingEquipmentName {
      get { return testingEquipmentName_; }
      set {
        testingEquipmentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipmentSerialNumber" field.</summary>
    public const int EquipmentSerialNumberFieldNumber = 14;
    private string equipmentSerialNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipmentSerialNumber {
      get { return equipmentSerialNumber_; }
      set {
        equipmentSerialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationName" field.</summary>
    public const int LocationNameFieldNumber = 15;
    private string locationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calibrationDate" field.</summary>
    public const int CalibrationDateFieldNumber = 16;
    private string calibrationDate_ = "";
    /// <summary>
    ///date type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalibrationDate {
      get { return calibrationDate_; }
      set {
        calibrationDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "installation" field.</summary>
    public const int InstallationFieldNumber = 17;
    private global::Grpc.services.Installation installation_ = global::Grpc.services.Installation.Outdoor;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.Installation Installation {
      get { return installation_; }
      set {
        installation_ = value;
      }
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 18;
    private string floor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Floor {
      get { return floor_; }
      set {
        floor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wing" field.</summary>
    public const int WingFieldNumber = 19;
    private string wing_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wing {
      get { return wing_; }
      set {
        wing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designFloor" field.</summary>
    public const int DesignFloorFieldNumber = 20;
    private string designFloor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignFloor {
      get { return designFloor_; }
      set {
        designFloor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designWing" field.</summary>
    public const int DesignWingFieldNumber = 21;
    private string designWing_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignWing {
      get { return designWing_; }
      set {
        designWing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spliceCount" field.</summary>
    public const int SpliceCountFieldNumber = 22;
    private int spliceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpliceCount {
      get { return spliceCount_; }
      set {
        spliceCount_ = value;
      }
    }

    /// <summary>Field number for the "designSpliceCount" field.</summary>
    public const int DesignSpliceCountFieldNumber = 23;
    private int designSpliceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesignSpliceCount {
      get { return designSpliceCount_; }
      set {
        designSpliceCount_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 24;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipmentDataFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipmentDataFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (!object.Equals(TaskSnapshot, other.TaskSnapshot)) return false;
      if (FeederNumber != other.FeederNumber) return false;
      if (EquipmentRefName != other.EquipmentRefName) return false;
      if (DesignEquipmentRefName != other.DesignEquipmentRefName) return false;
      if (ParentStructureID != other.ParentStructureID) return false;
      if (DesignParentStructureID != other.DesignParentStructureID) return false;
      if (OtdrStatus != other.OtdrStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpticalLossEast, other.OpticalLossEast)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpticalLossWest, other.OpticalLossWest)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesignOpticalLossEast, other.DesignOpticalLossEast)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesignOpticalLossWest, other.DesignOpticalLossWest)) return false;
      if (TestingEquipmentName != other.TestingEquipmentName) return false;
      if (EquipmentSerialNumber != other.EquipmentSerialNumber) return false;
      if (LocationName != other.LocationName) return false;
      if (CalibrationDate != other.CalibrationDate) return false;
      if (Installation != other.Installation) return false;
      if (Floor != other.Floor) return false;
      if (Wing != other.Wing) return false;
      if (DesignFloor != other.DesignFloor) return false;
      if (DesignWing != other.DesignWing) return false;
      if (SpliceCount != other.SpliceCount) return false;
      if (DesignSpliceCount != other.DesignSpliceCount) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (taskSnapshot_ != null) hash ^= TaskSnapshot.GetHashCode();
      if (FeederNumber.Length != 0) hash ^= FeederNumber.GetHashCode();
      if (EquipmentRefName.Length != 0) hash ^= EquipmentRefName.GetHashCode();
      if (DesignEquipmentRefName.Length != 0) hash ^= DesignEquipmentRefName.GetHashCode();
      if (ParentStructureID.Length != 0) hash ^= ParentStructureID.GetHashCode();
      if (DesignParentStructureID.Length != 0) hash ^= DesignParentStructureID.GetHashCode();
      if (OtdrStatus != global::Grpc.services.EquipmentDataFields.Types.OTDRStatus.NotDone) hash ^= OtdrStatus.GetHashCode();
      if (OpticalLossEast != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpticalLossEast);
      if (OpticalLossWest != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpticalLossWest);
      if (DesignOpticalLossEast != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesignOpticalLossEast);
      if (DesignOpticalLossWest != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesignOpticalLossWest);
      if (TestingEquipmentName.Length != 0) hash ^= TestingEquipmentName.GetHashCode();
      if (EquipmentSerialNumber.Length != 0) hash ^= EquipmentSerialNumber.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (CalibrationDate.Length != 0) hash ^= CalibrationDate.GetHashCode();
      if (Installation != global::Grpc.services.Installation.Outdoor) hash ^= Installation.GetHashCode();
      if (Floor.Length != 0) hash ^= Floor.GetHashCode();
      if (Wing.Length != 0) hash ^= Wing.GetHashCode();
      if (DesignFloor.Length != 0) hash ^= DesignFloor.GetHashCode();
      if (DesignWing.Length != 0) hash ^= DesignWing.GetHashCode();
      if (SpliceCount != 0) hash ^= SpliceCount.GetHashCode();
      if (DesignSpliceCount != 0) hash ^= DesignSpliceCount.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (taskSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TaskSnapshot);
      }
      if (FeederNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FeederNumber);
      }
      if (EquipmentRefName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EquipmentRefName);
      }
      if (DesignEquipmentRefName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DesignEquipmentRefName);
      }
      if (ParentStructureID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ParentStructureID);
      }
      if (DesignParentStructureID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DesignParentStructureID);
      }
      if (OtdrStatus != global::Grpc.services.EquipmentDataFields.Types.OTDRStatus.NotDone) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OtdrStatus);
      }
      if (OpticalLossEast != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(OpticalLossEast);
      }
      if (OpticalLossWest != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(OpticalLossWest);
      }
      if (DesignOpticalLossEast != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(DesignOpticalLossEast);
      }
      if (DesignOpticalLossWest != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(DesignOpticalLossWest);
      }
      if (TestingEquipmentName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TestingEquipmentName);
      }
      if (EquipmentSerialNumber.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EquipmentSerialNumber);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LocationName);
      }
      if (CalibrationDate.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CalibrationDate);
      }
      if (Installation != global::Grpc.services.Installation.Outdoor) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Installation);
      }
      if (Floor.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Floor);
      }
      if (Wing.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Wing);
      }
      if (DesignFloor.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(DesignFloor);
      }
      if (DesignWing.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(DesignWing);
      }
      if (SpliceCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SpliceCount);
      }
      if (DesignSpliceCount != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DesignSpliceCount);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (taskSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskSnapshot);
      }
      if (FeederNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeederNumber);
      }
      if (EquipmentRefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipmentRefName);
      }
      if (DesignEquipmentRefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignEquipmentRefName);
      }
      if (ParentStructureID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentStructureID);
      }
      if (DesignParentStructureID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignParentStructureID);
      }
      if (OtdrStatus != global::Grpc.services.EquipmentDataFields.Types.OTDRStatus.NotDone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OtdrStatus);
      }
      if (OpticalLossEast != 0D) {
        size += 1 + 8;
      }
      if (OpticalLossWest != 0D) {
        size += 1 + 8;
      }
      if (DesignOpticalLossEast != 0D) {
        size += 1 + 8;
      }
      if (DesignOpticalLossWest != 0D) {
        size += 1 + 8;
      }
      if (TestingEquipmentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestingEquipmentName);
      }
      if (EquipmentSerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipmentSerialNumber);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (CalibrationDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalibrationDate);
      }
      if (Installation != global::Grpc.services.Installation.Outdoor) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Installation);
      }
      if (Floor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Floor);
      }
      if (Wing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Wing);
      }
      if (DesignFloor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DesignFloor);
      }
      if (DesignWing.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DesignWing);
      }
      if (SpliceCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpliceCount);
      }
      if (DesignSpliceCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DesignSpliceCount);
      }
      if (Label.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipmentDataFields other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.taskSnapshot_ != null) {
        if (taskSnapshot_ == null) {
          TaskSnapshot = new global::Grpc.services.TaskSnapshot();
        }
        TaskSnapshot.MergeFrom(other.TaskSnapshot);
      }
      if (other.FeederNumber.Length != 0) {
        FeederNumber = other.FeederNumber;
      }
      if (other.EquipmentRefName.Length != 0) {
        EquipmentRefName = other.EquipmentRefName;
      }
      if (other.DesignEquipmentRefName.Length != 0) {
        DesignEquipmentRefName = other.DesignEquipmentRefName;
      }
      if (other.ParentStructureID.Length != 0) {
        ParentStructureID = other.ParentStructureID;
      }
      if (other.DesignParentStructureID.Length != 0) {
        DesignParentStructureID = other.DesignParentStructureID;
      }
      if (other.OtdrStatus != global::Grpc.services.EquipmentDataFields.Types.OTDRStatus.NotDone) {
        OtdrStatus = other.OtdrStatus;
      }
      if (other.OpticalLossEast != 0D) {
        OpticalLossEast = other.OpticalLossEast;
      }
      if (other.OpticalLossWest != 0D) {
        OpticalLossWest = other.OpticalLossWest;
      }
      if (other.DesignOpticalLossEast != 0D) {
        DesignOpticalLossEast = other.DesignOpticalLossEast;
      }
      if (other.DesignOpticalLossWest != 0D) {
        DesignOpticalLossWest = other.DesignOpticalLossWest;
      }
      if (other.TestingEquipmentName.Length != 0) {
        TestingEquipmentName = other.TestingEquipmentName;
      }
      if (other.EquipmentSerialNumber.Length != 0) {
        EquipmentSerialNumber = other.EquipmentSerialNumber;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.CalibrationDate.Length != 0) {
        CalibrationDate = other.CalibrationDate;
      }
      if (other.Installation != global::Grpc.services.Installation.Outdoor) {
        Installation = other.Installation;
      }
      if (other.Floor.Length != 0) {
        Floor = other.Floor;
      }
      if (other.Wing.Length != 0) {
        Wing = other.Wing;
      }
      if (other.DesignFloor.Length != 0) {
        DesignFloor = other.DesignFloor;
      }
      if (other.DesignWing.Length != 0) {
        DesignWing = other.DesignWing;
      }
      if (other.SpliceCount != 0) {
        SpliceCount = other.SpliceCount;
      }
      if (other.DesignSpliceCount != 0) {
        DesignSpliceCount = other.DesignSpliceCount;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            if (taskSnapshot_ == null) {
              TaskSnapshot = new global::Grpc.services.TaskSnapshot();
            }
            input.ReadMessage(TaskSnapshot);
            break;
          }
          case 26: {
            FeederNumber = input.ReadString();
            break;
          }
          case 34: {
            EquipmentRefName = input.ReadString();
            break;
          }
          case 42: {
            DesignEquipmentRefName = input.ReadString();
            break;
          }
          case 50: {
            ParentStructureID = input.ReadString();
            break;
          }
          case 58: {
            DesignParentStructureID = input.ReadString();
            break;
          }
          case 64: {
            OtdrStatus = (global::Grpc.services.EquipmentDataFields.Types.OTDRStatus) input.ReadEnum();
            break;
          }
          case 73: {
            OpticalLossEast = input.ReadDouble();
            break;
          }
          case 81: {
            OpticalLossWest = input.ReadDouble();
            break;
          }
          case 89: {
            DesignOpticalLossEast = input.ReadDouble();
            break;
          }
          case 97: {
            DesignOpticalLossWest = input.ReadDouble();
            break;
          }
          case 106: {
            TestingEquipmentName = input.ReadString();
            break;
          }
          case 114: {
            EquipmentSerialNumber = input.ReadString();
            break;
          }
          case 122: {
            LocationName = input.ReadString();
            break;
          }
          case 130: {
            CalibrationDate = input.ReadString();
            break;
          }
          case 136: {
            Installation = (global::Grpc.services.Installation) input.ReadEnum();
            break;
          }
          case 146: {
            Floor = input.ReadString();
            break;
          }
          case 154: {
            Wing = input.ReadString();
            break;
          }
          case 162: {
            DesignFloor = input.ReadString();
            break;
          }
          case 170: {
            DesignWing = input.ReadString();
            break;
          }
          case 176: {
            SpliceCount = input.ReadInt32();
            break;
          }
          case 184: {
            DesignSpliceCount = input.ReadInt32();
            break;
          }
          case 194: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EquipmentDataFields message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OTDRStatus {
        [pbr::OriginalName("NOT_DONE")] NotDone = 0,
        [pbr::OriginalName("EAST_DONE")] EastDone = 1,
        [pbr::OriginalName("WEST_DONE")] WestDone = 2,
        [pbr::OriginalName("EAST_WEST_DONE")] EastWestDone = 3,
      }

    }
    #endregion

  }

  public sealed partial class SpanDataFields : pb::IMessage<SpanDataFields> {
    private static readonly pb::MessageParser<SpanDataFields> _parser = new pb::MessageParser<SpanDataFields>(() => new SpanDataFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanDataFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanDataFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanDataFields(SpanDataFields other) : this() {
      objectID_ = other.objectID_;
      taskSnapshot_ = other.taskSnapshot_ != null ? other.taskSnapshot_.Clone() : null;
      length_ = other.length_;
      constructionMethod_ = other.constructionMethod_;
      ductConfig_ = other.ductConfig_;
      strata_ = other.strata_;
      fim_ = other.fim_;
      depth_ = other.depth_;
      rowRequired_ = other.rowRequired_;
      rowType_ = other.rowType_;
      designLength_ = other.designLength_;
      designConstructionMethod_ = other.designConstructionMethod_;
      designDuctConfig_ = other.designDuctConfig_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanDataFields Clone() {
      return new SpanDataFields(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskSnapshot" field.</summary>
    public const int TaskSnapshotFieldNumber = 2;
    private global::Grpc.services.TaskSnapshot taskSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskSnapshot TaskSnapshot {
      get { return taskSnapshot_; }
      set {
        taskSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "constructionMethod" field.</summary>
    public const int ConstructionMethodFieldNumber = 4;
    private string constructionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConstructionMethod {
      get { return constructionMethod_; }
      set {
        constructionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ductConfig" field.</summary>
    public const int DuctConfigFieldNumber = 5;
    private string ductConfig_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DuctConfig {
      get { return ductConfig_; }
      set {
        ductConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strata" field.</summary>
    public const int StrataFieldNumber = 6;
    private string strata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strata {
      get { return strata_; }
      set {
        strata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fim" field.</summary>
    public const int FimFieldNumber = 7;
    private bool fim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fim {
      get { return fim_; }
      set {
        fim_ = value;
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 8;
    private double depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "rowRequired" field.</summary>
    public const int RowRequiredFieldNumber = 9;
    private bool rowRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RowRequired {
      get { return rowRequired_; }
      set {
        rowRequired_ = value;
      }
    }

    /// <summary>Field number for the "rowType" field.</summary>
    public const int RowTypeFieldNumber = 10;
    private string rowType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowType {
      get { return rowType_; }
      set {
        rowType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designLength" field.</summary>
    public const int DesignLengthFieldNumber = 11;
    private double designLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DesignLength {
      get { return designLength_; }
      set {
        designLength_ = value;
      }
    }

    /// <summary>Field number for the "designConstructionMethod" field.</summary>
    public const int DesignConstructionMethodFieldNumber = 12;
    private string designConstructionMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignConstructionMethod {
      get { return designConstructionMethod_; }
      set {
        designConstructionMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designDuctConfig" field.</summary>
    public const int DesignDuctConfigFieldNumber = 13;
    private string designDuctConfig_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignDuctConfig {
      get { return designDuctConfig_; }
      set {
        designDuctConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanDataFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanDataFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (!object.Equals(TaskSnapshot, other.TaskSnapshot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Length, other.Length)) return false;
      if (ConstructionMethod != other.ConstructionMethod) return false;
      if (DuctConfig != other.DuctConfig) return false;
      if (Strata != other.Strata) return false;
      if (Fim != other.Fim) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Depth, other.Depth)) return false;
      if (RowRequired != other.RowRequired) return false;
      if (RowType != other.RowType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesignLength, other.DesignLength)) return false;
      if (DesignConstructionMethod != other.DesignConstructionMethod) return false;
      if (DesignDuctConfig != other.DesignDuctConfig) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (taskSnapshot_ != null) hash ^= TaskSnapshot.GetHashCode();
      if (Length != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Length);
      if (ConstructionMethod.Length != 0) hash ^= ConstructionMethod.GetHashCode();
      if (DuctConfig.Length != 0) hash ^= DuctConfig.GetHashCode();
      if (Strata.Length != 0) hash ^= Strata.GetHashCode();
      if (Fim != false) hash ^= Fim.GetHashCode();
      if (Depth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Depth);
      if (RowRequired != false) hash ^= RowRequired.GetHashCode();
      if (RowType.Length != 0) hash ^= RowType.GetHashCode();
      if (DesignLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesignLength);
      if (DesignConstructionMethod.Length != 0) hash ^= DesignConstructionMethod.GetHashCode();
      if (DesignDuctConfig.Length != 0) hash ^= DesignDuctConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (taskSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TaskSnapshot);
      }
      if (Length != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Length);
      }
      if (ConstructionMethod.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ConstructionMethod);
      }
      if (DuctConfig.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DuctConfig);
      }
      if (Strata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strata);
      }
      if (Fim != false) {
        output.WriteRawTag(56);
        output.WriteBool(Fim);
      }
      if (Depth != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Depth);
      }
      if (RowRequired != false) {
        output.WriteRawTag(72);
        output.WriteBool(RowRequired);
      }
      if (RowType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RowType);
      }
      if (DesignLength != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(DesignLength);
      }
      if (DesignConstructionMethod.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DesignConstructionMethod);
      }
      if (DesignDuctConfig.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DesignDuctConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (taskSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskSnapshot);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (ConstructionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConstructionMethod);
      }
      if (DuctConfig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DuctConfig);
      }
      if (Strata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strata);
      }
      if (Fim != false) {
        size += 1 + 1;
      }
      if (Depth != 0D) {
        size += 1 + 8;
      }
      if (RowRequired != false) {
        size += 1 + 1;
      }
      if (RowType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowType);
      }
      if (DesignLength != 0D) {
        size += 1 + 8;
      }
      if (DesignConstructionMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignConstructionMethod);
      }
      if (DesignDuctConfig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignDuctConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanDataFields other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.taskSnapshot_ != null) {
        if (taskSnapshot_ == null) {
          TaskSnapshot = new global::Grpc.services.TaskSnapshot();
        }
        TaskSnapshot.MergeFrom(other.TaskSnapshot);
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.ConstructionMethod.Length != 0) {
        ConstructionMethod = other.ConstructionMethod;
      }
      if (other.DuctConfig.Length != 0) {
        DuctConfig = other.DuctConfig;
      }
      if (other.Strata.Length != 0) {
        Strata = other.Strata;
      }
      if (other.Fim != false) {
        Fim = other.Fim;
      }
      if (other.Depth != 0D) {
        Depth = other.Depth;
      }
      if (other.RowRequired != false) {
        RowRequired = other.RowRequired;
      }
      if (other.RowType.Length != 0) {
        RowType = other.RowType;
      }
      if (other.DesignLength != 0D) {
        DesignLength = other.DesignLength;
      }
      if (other.DesignConstructionMethod.Length != 0) {
        DesignConstructionMethod = other.DesignConstructionMethod;
      }
      if (other.DesignDuctConfig.Length != 0) {
        DesignDuctConfig = other.DesignDuctConfig;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            if (taskSnapshot_ == null) {
              TaskSnapshot = new global::Grpc.services.TaskSnapshot();
            }
            input.ReadMessage(TaskSnapshot);
            break;
          }
          case 25: {
            Length = input.ReadDouble();
            break;
          }
          case 34: {
            ConstructionMethod = input.ReadString();
            break;
          }
          case 42: {
            DuctConfig = input.ReadString();
            break;
          }
          case 50: {
            Strata = input.ReadString();
            break;
          }
          case 56: {
            Fim = input.ReadBool();
            break;
          }
          case 65: {
            Depth = input.ReadDouble();
            break;
          }
          case 72: {
            RowRequired = input.ReadBool();
            break;
          }
          case 82: {
            RowType = input.ReadString();
            break;
          }
          case 89: {
            DesignLength = input.ReadDouble();
            break;
          }
          case 98: {
            DesignConstructionMethod = input.ReadString();
            break;
          }
          case 106: {
            DesignDuctConfig = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StructureDataFields : pb::IMessage<StructureDataFields> {
    private static readonly pb::MessageParser<StructureDataFields> _parser = new pb::MessageParser<StructureDataFields>(() => new StructureDataFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StructureDataFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureDataFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureDataFields(StructureDataFields other) : this() {
      objectID_ = other.objectID_;
      taskSnapshot_ = other.taskSnapshot_ != null ? other.taskSnapshot_.Clone() : null;
      structureRefName_ = other.structureRefName_;
      structureType_ = other.structureType_;
      productSerialNo_ = other.productSerialNo_;
      locationLandmark_ = other.locationLandmark_;
      mhHhSize_ = other.mhHhSize_;
      designStructureRefName_ = other.designStructureRefName_;
      designStructureType_ = other.designStructureType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructureDataFields Clone() {
      return new StructureDataFields(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskSnapshot" field.</summary>
    public const int TaskSnapshotFieldNumber = 2;
    private global::Grpc.services.TaskSnapshot taskSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskSnapshot TaskSnapshot {
      get { return taskSnapshot_; }
      set {
        taskSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "structureRefName" field.</summary>
    public const int StructureRefNameFieldNumber = 3;
    private string structureRefName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StructureRefName {
      get { return structureRefName_; }
      set {
        structureRefName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "structureType" field.</summary>
    public const int StructureTypeFieldNumber = 4;
    private string structureType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StructureType {
      get { return structureType_; }
      set {
        structureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productSerialNo" field.</summary>
    public const int ProductSerialNoFieldNumber = 5;
    private string productSerialNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductSerialNo {
      get { return productSerialNo_; }
      set {
        productSerialNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationLandmark" field.</summary>
    public const int LocationLandmarkFieldNumber = 6;
    private string locationLandmark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationLandmark {
      get { return locationLandmark_; }
      set {
        locationLandmark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mhHhSize" field.</summary>
    public const int MhHhSizeFieldNumber = 7;
    private string mhHhSize_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MhHhSize {
      get { return mhHhSize_; }
      set {
        mhHhSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designStructureRefName" field.</summary>
    public const int DesignStructureRefNameFieldNumber = 8;
    private string designStructureRefName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignStructureRefName {
      get { return designStructureRefName_; }
      set {
        designStructureRefName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designStructureType" field.</summary>
    public const int DesignStructureTypeFieldNumber = 9;
    private string designStructureType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignStructureType {
      get { return designStructureType_; }
      set {
        designStructureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StructureDataFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StructureDataFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (!object.Equals(TaskSnapshot, other.TaskSnapshot)) return false;
      if (StructureRefName != other.StructureRefName) return false;
      if (StructureType != other.StructureType) return false;
      if (ProductSerialNo != other.ProductSerialNo) return false;
      if (LocationLandmark != other.LocationLandmark) return false;
      if (MhHhSize != other.MhHhSize) return false;
      if (DesignStructureRefName != other.DesignStructureRefName) return false;
      if (DesignStructureType != other.DesignStructureType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (taskSnapshot_ != null) hash ^= TaskSnapshot.GetHashCode();
      if (StructureRefName.Length != 0) hash ^= StructureRefName.GetHashCode();
      if (StructureType.Length != 0) hash ^= StructureType.GetHashCode();
      if (ProductSerialNo.Length != 0) hash ^= ProductSerialNo.GetHashCode();
      if (LocationLandmark.Length != 0) hash ^= LocationLandmark.GetHashCode();
      if (MhHhSize.Length != 0) hash ^= MhHhSize.GetHashCode();
      if (DesignStructureRefName.Length != 0) hash ^= DesignStructureRefName.GetHashCode();
      if (DesignStructureType.Length != 0) hash ^= DesignStructureType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (taskSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TaskSnapshot);
      }
      if (StructureRefName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StructureRefName);
      }
      if (StructureType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StructureType);
      }
      if (ProductSerialNo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProductSerialNo);
      }
      if (LocationLandmark.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LocationLandmark);
      }
      if (MhHhSize.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MhHhSize);
      }
      if (DesignStructureRefName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DesignStructureRefName);
      }
      if (DesignStructureType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DesignStructureType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (taskSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskSnapshot);
      }
      if (StructureRefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StructureRefName);
      }
      if (StructureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StructureType);
      }
      if (ProductSerialNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductSerialNo);
      }
      if (LocationLandmark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationLandmark);
      }
      if (MhHhSize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MhHhSize);
      }
      if (DesignStructureRefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignStructureRefName);
      }
      if (DesignStructureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignStructureType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StructureDataFields other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.taskSnapshot_ != null) {
        if (taskSnapshot_ == null) {
          TaskSnapshot = new global::Grpc.services.TaskSnapshot();
        }
        TaskSnapshot.MergeFrom(other.TaskSnapshot);
      }
      if (other.StructureRefName.Length != 0) {
        StructureRefName = other.StructureRefName;
      }
      if (other.StructureType.Length != 0) {
        StructureType = other.StructureType;
      }
      if (other.ProductSerialNo.Length != 0) {
        ProductSerialNo = other.ProductSerialNo;
      }
      if (other.LocationLandmark.Length != 0) {
        LocationLandmark = other.LocationLandmark;
      }
      if (other.MhHhSize.Length != 0) {
        MhHhSize = other.MhHhSize;
      }
      if (other.DesignStructureRefName.Length != 0) {
        DesignStructureRefName = other.DesignStructureRefName;
      }
      if (other.DesignStructureType.Length != 0) {
        DesignStructureType = other.DesignStructureType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            if (taskSnapshot_ == null) {
              TaskSnapshot = new global::Grpc.services.TaskSnapshot();
            }
            input.ReadMessage(TaskSnapshot);
            break;
          }
          case 26: {
            StructureRefName = input.ReadString();
            break;
          }
          case 34: {
            StructureType = input.ReadString();
            break;
          }
          case 42: {
            ProductSerialNo = input.ReadString();
            break;
          }
          case 50: {
            LocationLandmark = input.ReadString();
            break;
          }
          case 58: {
            MhHhSize = input.ReadString();
            break;
          }
          case 66: {
            DesignStructureRefName = input.ReadString();
            break;
          }
          case 74: {
            DesignStructureType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransmediaDataFields : pb::IMessage<TransmediaDataFields> {
    private static readonly pb::MessageParser<TransmediaDataFields> _parser = new pb::MessageParser<TransmediaDataFields>(() => new TransmediaDataFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmediaDataFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaDataFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaDataFields(TransmediaDataFields other) : this() {
      objectID_ = other.objectID_;
      taskSnapshot_ = other.taskSnapshot_ != null ? other.taskSnapshot_.Clone() : null;
      length_ = other.length_;
      transmediaType_ = other.transmediaType_;
      transmediaCategory_ = other.transmediaCategory_;
      label_ = other.label_;
      otdrReadingStart_ = other.otdrReadingStart_;
      otdrReadingEnd_ = other.otdrReadingEnd_;
      designLength_ = other.designLength_;
      designTransmediaType_ = other.designTransmediaType_;
      designTransmediaCategory_ = other.designTransmediaCategory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaDataFields Clone() {
      return new TransmediaDataFields(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskSnapshot" field.</summary>
    public const int TaskSnapshotFieldNumber = 2;
    private global::Grpc.services.TaskSnapshot taskSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskSnapshot TaskSnapshot {
      get { return taskSnapshot_; }
      set {
        taskSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private double length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "transmediaType" field.</summary>
    public const int TransmediaTypeFieldNumber = 4;
    private string transmediaType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransmediaType {
      get { return transmediaType_; }
      set {
        transmediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transmediaCategory" field.</summary>
    public const int TransmediaCategoryFieldNumber = 5;
    private string transmediaCategory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransmediaCategory {
      get { return transmediaCategory_; }
      set {
        transmediaCategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 6;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otdrReadingStart" field.</summary>
    public const int OtdrReadingStartFieldNumber = 7;
    private double otdrReadingStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OtdrReadingStart {
      get { return otdrReadingStart_; }
      set {
        otdrReadingStart_ = value;
      }
    }

    /// <summary>Field number for the "otdrReadingEnd" field.</summary>
    public const int OtdrReadingEndFieldNumber = 8;
    private double otdrReadingEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OtdrReadingEnd {
      get { return otdrReadingEnd_; }
      set {
        otdrReadingEnd_ = value;
      }
    }

    /// <summary>Field number for the "designLength" field.</summary>
    public const int DesignLengthFieldNumber = 9;
    private double designLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DesignLength {
      get { return designLength_; }
      set {
        designLength_ = value;
      }
    }

    /// <summary>Field number for the "designTransmediaType" field.</summary>
    public const int DesignTransmediaTypeFieldNumber = 10;
    private string designTransmediaType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignTransmediaType {
      get { return designTransmediaType_; }
      set {
        designTransmediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "designTransmediaCategory" field.</summary>
    public const int DesignTransmediaCategoryFieldNumber = 11;
    private string designTransmediaCategory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignTransmediaCategory {
      get { return designTransmediaCategory_; }
      set {
        designTransmediaCategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmediaDataFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmediaDataFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (!object.Equals(TaskSnapshot, other.TaskSnapshot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Length, other.Length)) return false;
      if (TransmediaType != other.TransmediaType) return false;
      if (TransmediaCategory != other.TransmediaCategory) return false;
      if (Label != other.Label) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OtdrReadingStart, other.OtdrReadingStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OtdrReadingEnd, other.OtdrReadingEnd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesignLength, other.DesignLength)) return false;
      if (DesignTransmediaType != other.DesignTransmediaType) return false;
      if (DesignTransmediaCategory != other.DesignTransmediaCategory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (taskSnapshot_ != null) hash ^= TaskSnapshot.GetHashCode();
      if (Length != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Length);
      if (TransmediaType.Length != 0) hash ^= TransmediaType.GetHashCode();
      if (TransmediaCategory.Length != 0) hash ^= TransmediaCategory.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (OtdrReadingStart != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OtdrReadingStart);
      if (OtdrReadingEnd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OtdrReadingEnd);
      if (DesignLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesignLength);
      if (DesignTransmediaType.Length != 0) hash ^= DesignTransmediaType.GetHashCode();
      if (DesignTransmediaCategory.Length != 0) hash ^= DesignTransmediaCategory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (taskSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TaskSnapshot);
      }
      if (Length != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Length);
      }
      if (TransmediaType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TransmediaType);
      }
      if (TransmediaCategory.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TransmediaCategory);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Label);
      }
      if (OtdrReadingStart != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(OtdrReadingStart);
      }
      if (OtdrReadingEnd != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(OtdrReadingEnd);
      }
      if (DesignLength != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(DesignLength);
      }
      if (DesignTransmediaType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DesignTransmediaType);
      }
      if (DesignTransmediaCategory.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DesignTransmediaCategory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (taskSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskSnapshot);
      }
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (TransmediaType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransmediaType);
      }
      if (TransmediaCategory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransmediaCategory);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (OtdrReadingStart != 0D) {
        size += 1 + 8;
      }
      if (OtdrReadingEnd != 0D) {
        size += 1 + 8;
      }
      if (DesignLength != 0D) {
        size += 1 + 8;
      }
      if (DesignTransmediaType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignTransmediaType);
      }
      if (DesignTransmediaCategory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesignTransmediaCategory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmediaDataFields other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.taskSnapshot_ != null) {
        if (taskSnapshot_ == null) {
          TaskSnapshot = new global::Grpc.services.TaskSnapshot();
        }
        TaskSnapshot.MergeFrom(other.TaskSnapshot);
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.TransmediaType.Length != 0) {
        TransmediaType = other.TransmediaType;
      }
      if (other.TransmediaCategory.Length != 0) {
        TransmediaCategory = other.TransmediaCategory;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.OtdrReadingStart != 0D) {
        OtdrReadingStart = other.OtdrReadingStart;
      }
      if (other.OtdrReadingEnd != 0D) {
        OtdrReadingEnd = other.OtdrReadingEnd;
      }
      if (other.DesignLength != 0D) {
        DesignLength = other.DesignLength;
      }
      if (other.DesignTransmediaType.Length != 0) {
        DesignTransmediaType = other.DesignTransmediaType;
      }
      if (other.DesignTransmediaCategory.Length != 0) {
        DesignTransmediaCategory = other.DesignTransmediaCategory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            if (taskSnapshot_ == null) {
              TaskSnapshot = new global::Grpc.services.TaskSnapshot();
            }
            input.ReadMessage(TaskSnapshot);
            break;
          }
          case 25: {
            Length = input.ReadDouble();
            break;
          }
          case 34: {
            TransmediaType = input.ReadString();
            break;
          }
          case 42: {
            TransmediaCategory = input.ReadString();
            break;
          }
          case 50: {
            Label = input.ReadString();
            break;
          }
          case 57: {
            OtdrReadingStart = input.ReadDouble();
            break;
          }
          case 65: {
            OtdrReadingEnd = input.ReadDouble();
            break;
          }
          case 73: {
            DesignLength = input.ReadDouble();
            break;
          }
          case 82: {
            DesignTransmediaType = input.ReadString();
            break;
          }
          case 90: {
            DesignTransmediaCategory = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransmediaMDUDataFields : pb::IMessage<TransmediaMDUDataFields> {
    private static readonly pb::MessageParser<TransmediaMDUDataFields> _parser = new pb::MessageParser<TransmediaMDUDataFields>(() => new TransmediaMDUDataFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmediaMDUDataFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUDataFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUDataFields(TransmediaMDUDataFields other) : this() {
      objectID_ = other.objectID_;
      taskSnapshot_ = other.taskSnapshot_ != null ? other.taskSnapshot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmediaMDUDataFields Clone() {
      return new TransmediaMDUDataFields(this);
    }

    /// <summary>Field number for the "objectID" field.</summary>
    public const int ObjectIDFieldNumber = 1;
    private long objectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectID {
      get { return objectID_; }
      set {
        objectID_ = value;
      }
    }

    /// <summary>Field number for the "taskSnapshot" field.</summary>
    public const int TaskSnapshotFieldNumber = 2;
    private global::Grpc.services.TaskSnapshot taskSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TaskSnapshot TaskSnapshot {
      get { return taskSnapshot_; }
      set {
        taskSnapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmediaMDUDataFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmediaMDUDataFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectID != other.ObjectID) return false;
      if (!object.Equals(TaskSnapshot, other.TaskSnapshot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectID != 0L) hash ^= ObjectID.GetHashCode();
      if (taskSnapshot_ != null) hash ^= TaskSnapshot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectID);
      }
      if (taskSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TaskSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectID);
      }
      if (taskSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskSnapshot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmediaMDUDataFields other) {
      if (other == null) {
        return;
      }
      if (other.ObjectID != 0L) {
        ObjectID = other.ObjectID;
      }
      if (other.taskSnapshot_ != null) {
        if (taskSnapshot_ == null) {
          TaskSnapshot = new global::Grpc.services.TaskSnapshot();
        }
        TaskSnapshot.MergeFrom(other.TaskSnapshot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectID = input.ReadInt64();
            break;
          }
          case 18: {
            if (taskSnapshot_ == null) {
              TaskSnapshot = new global::Grpc.services.TaskSnapshot();
            }
            input.ReadMessage(TaskSnapshot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskData : pb::IMessage<TaskData> {
    private static readonly pb::MessageParser<TaskData> _parser = new pb::MessageParser<TaskData>(() => new TaskData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData(TaskData other) : this() {
      esriGeometryString_ = other.esriGeometryString_;
      switch (other.DataFieldsObjectCase) {
        case DataFieldsObjectOneofCase.EquipmentAttributes:
          EquipmentAttributes = other.EquipmentAttributes.Clone();
          break;
        case DataFieldsObjectOneofCase.SpanAttributes:
          SpanAttributes = other.SpanAttributes.Clone();
          break;
        case DataFieldsObjectOneofCase.StructureAttributes:
          StructureAttributes = other.StructureAttributes.Clone();
          break;
        case DataFieldsObjectOneofCase.TransmediaAttributes:
          TransmediaAttributes = other.TransmediaAttributes.Clone();
          break;
        case DataFieldsObjectOneofCase.TransmediaMDUAttributes:
          TransmediaMDUAttributes = other.TransmediaMDUAttributes.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskData Clone() {
      return new TaskData(this);
    }

    /// <summary>Field number for the "esriGeometryString" field.</summary>
    public const int EsriGeometryStringFieldNumber = 1;
    private string esriGeometryString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EsriGeometryString {
      get { return esriGeometryString_; }
      set {
        esriGeometryString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipmentAttributes" field.</summary>
    public const int EquipmentAttributesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.EquipmentDataFields EquipmentAttributes {
      get { return dataFieldsObjectCase_ == DataFieldsObjectOneofCase.EquipmentAttributes ? (global::Grpc.services.EquipmentDataFields) dataFieldsObject_ : null; }
      set {
        dataFieldsObject_ = value;
        dataFieldsObjectCase_ = value == null ? DataFieldsObjectOneofCase.None : DataFieldsObjectOneofCase.EquipmentAttributes;
      }
    }

    /// <summary>Field number for the "spanAttributes" field.</summary>
    public const int SpanAttributesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.SpanDataFields SpanAttributes {
      get { return dataFieldsObjectCase_ == DataFieldsObjectOneofCase.SpanAttributes ? (global::Grpc.services.SpanDataFields) dataFieldsObject_ : null; }
      set {
        dataFieldsObject_ = value;
        dataFieldsObjectCase_ = value == null ? DataFieldsObjectOneofCase.None : DataFieldsObjectOneofCase.SpanAttributes;
      }
    }

    /// <summary>Field number for the "structureAttributes" field.</summary>
    public const int StructureAttributesFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.StructureDataFields StructureAttributes {
      get { return dataFieldsObjectCase_ == DataFieldsObjectOneofCase.StructureAttributes ? (global::Grpc.services.StructureDataFields) dataFieldsObject_ : null; }
      set {
        dataFieldsObject_ = value;
        dataFieldsObjectCase_ = value == null ? DataFieldsObjectOneofCase.None : DataFieldsObjectOneofCase.StructureAttributes;
      }
    }

    /// <summary>Field number for the "transmediaAttributes" field.</summary>
    public const int TransmediaAttributesFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TransmediaDataFields TransmediaAttributes {
      get { return dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaAttributes ? (global::Grpc.services.TransmediaDataFields) dataFieldsObject_ : null; }
      set {
        dataFieldsObject_ = value;
        dataFieldsObjectCase_ = value == null ? DataFieldsObjectOneofCase.None : DataFieldsObjectOneofCase.TransmediaAttributes;
      }
    }

    /// <summary>Field number for the "transmediaMDUAttributes" field.</summary>
    public const int TransmediaMDUAttributesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.TransmediaMDUDataFields TransmediaMDUAttributes {
      get { return dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaMDUAttributes ? (global::Grpc.services.TransmediaMDUDataFields) dataFieldsObject_ : null; }
      set {
        dataFieldsObject_ = value;
        dataFieldsObjectCase_ = value == null ? DataFieldsObjectOneofCase.None : DataFieldsObjectOneofCase.TransmediaMDUAttributes;
      }
    }

    private object dataFieldsObject_;
    /// <summary>Enum of possible cases for the "DataFieldsObject" oneof.</summary>
    public enum DataFieldsObjectOneofCase {
      None = 0,
      EquipmentAttributes = 2,
      SpanAttributes = 3,
      StructureAttributes = 4,
      TransmediaAttributes = 5,
      TransmediaMDUAttributes = 6,
    }
    private DataFieldsObjectOneofCase dataFieldsObjectCase_ = DataFieldsObjectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataFieldsObjectOneofCase DataFieldsObjectCase {
      get { return dataFieldsObjectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataFieldsObject() {
      dataFieldsObjectCase_ = DataFieldsObjectOneofCase.None;
      dataFieldsObject_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EsriGeometryString != other.EsriGeometryString) return false;
      if (!object.Equals(EquipmentAttributes, other.EquipmentAttributes)) return false;
      if (!object.Equals(SpanAttributes, other.SpanAttributes)) return false;
      if (!object.Equals(StructureAttributes, other.StructureAttributes)) return false;
      if (!object.Equals(TransmediaAttributes, other.TransmediaAttributes)) return false;
      if (!object.Equals(TransmediaMDUAttributes, other.TransmediaMDUAttributes)) return false;
      if (DataFieldsObjectCase != other.DataFieldsObjectCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EsriGeometryString.Length != 0) hash ^= EsriGeometryString.GetHashCode();
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.EquipmentAttributes) hash ^= EquipmentAttributes.GetHashCode();
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.SpanAttributes) hash ^= SpanAttributes.GetHashCode();
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.StructureAttributes) hash ^= StructureAttributes.GetHashCode();
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaAttributes) hash ^= TransmediaAttributes.GetHashCode();
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaMDUAttributes) hash ^= TransmediaMDUAttributes.GetHashCode();
      hash ^= (int) dataFieldsObjectCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EsriGeometryString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EsriGeometryString);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.EquipmentAttributes) {
        output.WriteRawTag(18);
        output.WriteMessage(EquipmentAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.SpanAttributes) {
        output.WriteRawTag(26);
        output.WriteMessage(SpanAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.StructureAttributes) {
        output.WriteRawTag(34);
        output.WriteMessage(StructureAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaAttributes) {
        output.WriteRawTag(42);
        output.WriteMessage(TransmediaAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaMDUAttributes) {
        output.WriteRawTag(50);
        output.WriteMessage(TransmediaMDUAttributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EsriGeometryString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EsriGeometryString);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.EquipmentAttributes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipmentAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.SpanAttributes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpanAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.StructureAttributes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructureAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaAttributes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransmediaAttributes);
      }
      if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaMDUAttributes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransmediaMDUAttributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskData other) {
      if (other == null) {
        return;
      }
      if (other.EsriGeometryString.Length != 0) {
        EsriGeometryString = other.EsriGeometryString;
      }
      switch (other.DataFieldsObjectCase) {
        case DataFieldsObjectOneofCase.EquipmentAttributes:
          if (EquipmentAttributes == null) {
            EquipmentAttributes = new global::Grpc.services.EquipmentDataFields();
          }
          EquipmentAttributes.MergeFrom(other.EquipmentAttributes);
          break;
        case DataFieldsObjectOneofCase.SpanAttributes:
          if (SpanAttributes == null) {
            SpanAttributes = new global::Grpc.services.SpanDataFields();
          }
          SpanAttributes.MergeFrom(other.SpanAttributes);
          break;
        case DataFieldsObjectOneofCase.StructureAttributes:
          if (StructureAttributes == null) {
            StructureAttributes = new global::Grpc.services.StructureDataFields();
          }
          StructureAttributes.MergeFrom(other.StructureAttributes);
          break;
        case DataFieldsObjectOneofCase.TransmediaAttributes:
          if (TransmediaAttributes == null) {
            TransmediaAttributes = new global::Grpc.services.TransmediaDataFields();
          }
          TransmediaAttributes.MergeFrom(other.TransmediaAttributes);
          break;
        case DataFieldsObjectOneofCase.TransmediaMDUAttributes:
          if (TransmediaMDUAttributes == null) {
            TransmediaMDUAttributes = new global::Grpc.services.TransmediaMDUDataFields();
          }
          TransmediaMDUAttributes.MergeFrom(other.TransmediaMDUAttributes);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EsriGeometryString = input.ReadString();
            break;
          }
          case 18: {
            global::Grpc.services.EquipmentDataFields subBuilder = new global::Grpc.services.EquipmentDataFields();
            if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.EquipmentAttributes) {
              subBuilder.MergeFrom(EquipmentAttributes);
            }
            input.ReadMessage(subBuilder);
            EquipmentAttributes = subBuilder;
            break;
          }
          case 26: {
            global::Grpc.services.SpanDataFields subBuilder = new global::Grpc.services.SpanDataFields();
            if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.SpanAttributes) {
              subBuilder.MergeFrom(SpanAttributes);
            }
            input.ReadMessage(subBuilder);
            SpanAttributes = subBuilder;
            break;
          }
          case 34: {
            global::Grpc.services.StructureDataFields subBuilder = new global::Grpc.services.StructureDataFields();
            if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.StructureAttributes) {
              subBuilder.MergeFrom(StructureAttributes);
            }
            input.ReadMessage(subBuilder);
            StructureAttributes = subBuilder;
            break;
          }
          case 42: {
            global::Grpc.services.TransmediaDataFields subBuilder = new global::Grpc.services.TransmediaDataFields();
            if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaAttributes) {
              subBuilder.MergeFrom(TransmediaAttributes);
            }
            input.ReadMessage(subBuilder);
            TransmediaAttributes = subBuilder;
            break;
          }
          case 50: {
            global::Grpc.services.TransmediaMDUDataFields subBuilder = new global::Grpc.services.TransmediaMDUDataFields();
            if (dataFieldsObjectCase_ == DataFieldsObjectOneofCase.TransmediaMDUAttributes) {
              subBuilder.MergeFrom(TransmediaMDUAttributes);
            }
            input.ReadMessage(subBuilder);
            TransmediaMDUAttributes = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class HistorySnippet : pb::IMessage<HistorySnippet> {
    private static readonly pb::MessageParser<HistorySnippet> _parser = new pb::MessageParser<HistorySnippet>(() => new HistorySnippet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistorySnippet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistorySnippet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistorySnippet(HistorySnippet other) : this() {
      status_ = other.status_;
      updateDate_ = other.updateDate_;
      updatedByUser_ = other.updatedByUser_;
      updatedByRole_ = other.updatedByRole_;
      remarks_ = other.remarks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistorySnippet Clone() {
      return new HistorySnippet(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Grpc.services.Status status_ = global::Grpc.services.Status.Assigned;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "updateDate" field.</summary>
    public const int UpdateDateFieldNumber = 2;
    private string updateDate_ = "";
    /// <summary>
    ///date type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateDate {
      get { return updateDate_; }
      set {
        updateDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updatedBy_User" field.</summary>
    public const int UpdatedByUserFieldNumber = 3;
    private string updatedByUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdatedByUser {
      get { return updatedByUser_; }
      set {
        updatedByUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updatedBy_Role" field.</summary>
    public const int UpdatedByRoleFieldNumber = 4;
    private global::Grpc.services.K2Role updatedByRole_ = global::Grpc.services.K2Role.K2NoRole;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.K2Role UpdatedByRole {
      get { return updatedByRole_; }
      set {
        updatedByRole_ = value;
      }
    }

    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 5;
    private string remarks_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistorySnippet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistorySnippet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (UpdateDate != other.UpdateDate) return false;
      if (UpdatedByUser != other.UpdatedByUser) return false;
      if (UpdatedByRole != other.UpdatedByRole) return false;
      if (Remarks != other.Remarks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Grpc.services.Status.Assigned) hash ^= Status.GetHashCode();
      if (UpdateDate.Length != 0) hash ^= UpdateDate.GetHashCode();
      if (UpdatedByUser.Length != 0) hash ^= UpdatedByUser.GetHashCode();
      if (UpdatedByRole != global::Grpc.services.K2Role.K2NoRole) hash ^= UpdatedByRole.GetHashCode();
      if (Remarks.Length != 0) hash ^= Remarks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != global::Grpc.services.Status.Assigned) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UpdateDate);
      }
      if (UpdatedByUser.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UpdatedByUser);
      }
      if (UpdatedByRole != global::Grpc.services.K2Role.K2NoRole) {
        output.WriteRawTag(32);
        output.WriteEnum((int) UpdatedByRole);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remarks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Grpc.services.Status.Assigned) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UpdateDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateDate);
      }
      if (UpdatedByUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedByUser);
      }
      if (UpdatedByRole != global::Grpc.services.K2Role.K2NoRole) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdatedByRole);
      }
      if (Remarks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistorySnippet other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Grpc.services.Status.Assigned) {
        Status = other.Status;
      }
      if (other.UpdateDate.Length != 0) {
        UpdateDate = other.UpdateDate;
      }
      if (other.UpdatedByUser.Length != 0) {
        UpdatedByUser = other.UpdatedByUser;
      }
      if (other.UpdatedByRole != global::Grpc.services.K2Role.K2NoRole) {
        UpdatedByRole = other.UpdatedByRole;
      }
      if (other.Remarks.Length != 0) {
        Remarks = other.Remarks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Grpc.services.Status) input.ReadEnum();
            break;
          }
          case 18: {
            UpdateDate = input.ReadString();
            break;
          }
          case 26: {
            UpdatedByUser = input.ReadString();
            break;
          }
          case 32: {
            UpdatedByRole = (global::Grpc.services.K2Role) input.ReadEnum();
            break;
          }
          case 42: {
            Remarks = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskHistory : pb::IMessage<TaskHistory> {
    private static readonly pb::MessageParser<TaskHistory> _parser = new pb::MessageParser<TaskHistory>(() => new TaskHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.services.TaskDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskHistory(TaskHistory other) : this() {
      taskID_ = other.taskID_;
      historySnippet_ = other.historySnippet_ != null ? other.historySnippet_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskHistory Clone() {
      return new TaskHistory(this);
    }

    /// <summary>Field number for the "taskID" field.</summary>
    public const int TaskIDFieldNumber = 1;
    private string taskID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskID {
      get { return taskID_; }
      set {
        taskID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "historySnippet" field.</summary>
    public const int HistorySnippetFieldNumber = 2;
    private global::Grpc.services.HistorySnippet historySnippet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.services.HistorySnippet HistorySnippet {
      get { return historySnippet_; }
      set {
        historySnippet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskID != other.TaskID) return false;
      if (!object.Equals(HistorySnippet, other.HistorySnippet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskID.Length != 0) hash ^= TaskID.GetHashCode();
      if (historySnippet_ != null) hash ^= HistorySnippet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskID);
      }
      if (historySnippet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HistorySnippet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskID);
      }
      if (historySnippet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistorySnippet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskHistory other) {
      if (other == null) {
        return;
      }
      if (other.TaskID.Length != 0) {
        TaskID = other.TaskID;
      }
      if (other.historySnippet_ != null) {
        if (historySnippet_ == null) {
          HistorySnippet = new global::Grpc.services.HistorySnippet();
        }
        HistorySnippet.MergeFrom(other.HistorySnippet);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskID = input.ReadString();
            break;
          }
          case 18: {
            if (historySnippet_ == null) {
              HistorySnippet = new global::Grpc.services.HistorySnippet();
            }
            input.ReadMessage(HistorySnippet);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
